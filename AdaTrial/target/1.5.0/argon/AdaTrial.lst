
c:/Users/IoT_Instructor/Documents/Brian/particle-03-brashap/AdaTrial/target/1.5.0/argon/AdaTrial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002534  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6550  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e274  000d6554  0001e274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000514  2003e2dc  2003e2dc  0002e2dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d65bc  000d65bc  000265bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d65e4  000d65e4  000265e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c1efb  00000000  00000000  000265e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f00c  00000000  00000000  000e84e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001adea  00000000  00000000  000f74ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002360  00000000  00000000  001122d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004278  00000000  00000000  00114639  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032ece  00000000  00000000  001188b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002535d  00000000  00000000  0014b77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001036be  00000000  00000000  00170adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c614  00000000  00000000  0027419c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fecf 	bl	d5dd0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 feef 	bl	d5e1c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e274 	.word	0x2003e274
   d4048:	000d6554 	.word	0x000d6554
   d404c:	2003e2dc 	.word	0x2003e2dc
   d4050:	2003e2dc 	.word	0x2003e2dc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 ff15 	bl	d4e88 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6544 	.word	0x000d6544
   d4080:	000d6504 	.word	0x000d6504

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b846 	b.w	d4114 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f845 	bl	d4118 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bebb 	b.w	d4e0c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bd2d 	b.w	d4af4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd33 	b.w	d4b04 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd31 	b.w	d4b04 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fc96 	bl	d49dc <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d480d 	.word	0x000d480d

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c8:	4770      	bx	lr
	...

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d63dc 	.word	0x000d63dc

000d4100 <_ZN9TCPClientD0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	211c      	movs	r1, #28
   d410c:	f001 fcf3 	bl	d5af6 <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <setup>:

long time1;
long time2;

// setup() runs once, when the device is first turned on.
void setup() {
   d4114:	4770      	bx	lr
	...

000d4118 <loop>:
  

}


void loop() {
   d4118:	b570      	push	{r4, r5, r6, lr}
  feed1 = random(1,100);
   d411a:	2164      	movs	r1, #100	; 0x64
   d411c:	2001      	movs	r0, #1
   d411e:	f001 f874 	bl	d520a <_Z6randomii>
   d4122:	4d17      	ldr	r5, [pc, #92]	; (d4180 <loop+0x68>)
  feed2 = random(1,1000);
   d4124:	4c17      	ldr	r4, [pc, #92]	; (d4184 <loop+0x6c>)

}


void loop() {
  feed1 = random(1,100);
   d4126:	6028      	str	r0, [r5, #0]
  feed2 = random(1,1000);
   d4128:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d412c:	2001      	movs	r0, #1
   d412e:	f001 f86c 	bl	d520a <_Z6randomii>
   d4132:	6020      	str	r0, [r4, #0]

 if(mqtt.Update()){
   d4134:	4814      	ldr	r0, [pc, #80]	; (d4188 <loop+0x70>)
   d4136:	f000 f901 	bl	d433c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d413a:	b138      	cbz	r0, d414c <loop+0x34>
  object1.publish(feed1); 
   d413c:	6829      	ldr	r1, [r5, #0]
   d413e:	4813      	ldr	r0, [pc, #76]	; (d418c <loop+0x74>)
   d4140:	f000 fb38 	bl	d47b4 <_ZN21Adafruit_MQTT_Publish7publishEi>
  object2.publish(feed2);
   d4144:	6821      	ldr	r1, [r4, #0]
   d4146:	4812      	ldr	r0, [pc, #72]	; (d4190 <loop+0x78>)
   d4148:	f000 fb34 	bl	d47b4 <_ZN21Adafruit_MQTT_Publish7publishEi>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d414c:	f000 fb66 	bl	d481c <HAL_Timer_Get_Milli_Seconds>
 } 

  time1=millis();
   d4150:	4d10      	ldr	r5, [pc, #64]	; (d4194 <loop+0x7c>)
  time2=millis();
   d4152:	4c11      	ldr	r4, [pc, #68]	; (d4198 <loop+0x80>)
 if(mqtt.Update()){
  object1.publish(feed1); 
  object2.publish(feed2);
 } 

  time1=millis();
   d4154:	6028      	str	r0, [r5, #0]
   d4156:	f000 fb61 	bl	d481c <HAL_Timer_Get_Milli_Seconds>
  time2=millis();
  while((time2-time1)<2000) {
   d415a:	4626      	mov	r6, r4
  object1.publish(feed1); 
  object2.publish(feed2);
 } 

  time1=millis();
  time2=millis();
   d415c:	6020      	str	r0, [r4, #0]
  while((time2-time1)<2000) {
   d415e:	6823      	ldr	r3, [r4, #0]
   d4160:	682a      	ldr	r2, [r5, #0]
   d4162:	1a9b      	subs	r3, r3, r2
   d4164:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   d4168:	da03      	bge.n	d4172 <loop+0x5a>
   d416a:	f000 fb57 	bl	d481c <HAL_Timer_Get_Milli_Seconds>
    time2=millis();
   d416e:	6030      	str	r0, [r6, #0]
  object2.publish(feed2);
 } 

  time1=millis();
  time2=millis();
  while((time2-time1)<2000) {
   d4170:	e7f5      	b.n	d415e <loop+0x46>
    time2=millis();
  }

 delay(30000);
   d4172:	f247 5030 	movw	r0, #30000	; 0x7530
   d4176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  time2=millis();
  while((time2-time1)<2000) {
    time2=millis();
  }

 delay(30000);
   d417a:	f000 be09 	b.w	d4d90 <delay>
   d417e:	bf00      	nop
   d4180:	2003e3f0 	.word	0x2003e3f0
   d4184:	2003e3f4 	.word	0x2003e3f4
   d4188:	2003e314 	.word	0x2003e314
   d418c:	2003e308 	.word	0x2003e308
   d4190:	2003e2e0 	.word	0x2003e2e0
   d4194:	2003e3e8 	.word	0x2003e3e8
   d4198:	2003e3ec 	.word	0x2003e3ec

000d419c <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d419c:	b510      	push	{r4, lr}
   d419e:	21d4      	movs	r1, #212	; 0xd4
   d41a0:	4604      	mov	r4, r0
   d41a2:	f001 fca8 	bl	d5af6 <_ZdlPvj>
   d41a6:	4620      	mov	r0, r4
   d41a8:	bd10      	pop	{r4, pc}
	...

000d41ac <_GLOBAL__sub_I_TheClient>:
   d41ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
#define AIO_USERNAME  "<username>"
#define AIO_KEY       "<key>"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient; 
   d41ae:	4d17      	ldr	r5, [pc, #92]	; (d420c <_GLOBAL__sub_I_TheClient+0x60>)
   d41b0:	4e17      	ldr	r6, [pc, #92]	; (d4210 <_GLOBAL__sub_I_TheClient+0x64>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d41b2:	4c18      	ldr	r4, [pc, #96]	; (d4214 <_GLOBAL__sub_I_TheClient+0x68>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41b4:	f000 fb12 	bl	d47dc <HAL_Pin_Map>
   d41b8:	4628      	mov	r0, r5
   d41ba:	f001 fb97 	bl	d58ec <_ZN9TCPClientC1Ev>
   d41be:	4632      	mov	r2, r6
   d41c0:	4915      	ldr	r1, [pc, #84]	; (d4218 <_GLOBAL__sub_I_TheClient+0x6c>)
   d41c2:	4628      	mov	r0, r5
   d41c4:	f001 fc92 	bl	d5aec <__aeabi_atexit>
   d41c8:	4b14      	ldr	r3, [pc, #80]	; (d421c <_GLOBAL__sub_I_TheClient+0x70>)
   d41ca:	9300      	str	r3, [sp, #0]
   d41cc:	f240 725b 	movw	r2, #1883	; 0x75b
   d41d0:	4b13      	ldr	r3, [pc, #76]	; (d4220 <_GLOBAL__sub_I_TheClient+0x74>)
   d41d2:	4914      	ldr	r1, [pc, #80]	; (d4224 <_GLOBAL__sub_I_TheClient+0x78>)
   d41d4:	4620      	mov	r0, r4
   d41d6:	f000 f8e7 	bl	d43a8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d41da:	4b13      	ldr	r3, [pc, #76]	; (d4228 <_GLOBAL__sub_I_TheClient+0x7c>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d41dc:	4913      	ldr	r1, [pc, #76]	; (d422c <_GLOBAL__sub_I_TheClient+0x80>)
   d41de:	6023      	str	r3, [r4, #0]
   d41e0:	4632      	mov	r2, r6
   d41e2:	4620      	mov	r0, r4
   d41e4:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   d41e8:	f001 fc80 	bl	d5aec <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called <object> for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish object1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/feedname1");
   d41ec:	4621      	mov	r1, r4
   d41ee:	2300      	movs	r3, #0
   d41f0:	4a0f      	ldr	r2, [pc, #60]	; (d4230 <_GLOBAL__sub_I_TheClient+0x84>)
   d41f2:	4810      	ldr	r0, [pc, #64]	; (d4234 <_GLOBAL__sub_I_TheClient+0x88>)
   d41f4:	f000 faca 	bl	d478c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish object2 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/feedname2");
   d41f8:	4a0f      	ldr	r2, [pc, #60]	; (d4238 <_GLOBAL__sub_I_TheClient+0x8c>)
   d41fa:	4810      	ldr	r0, [pc, #64]	; (d423c <_GLOBAL__sub_I_TheClient+0x90>)
   d41fc:	2300      	movs	r3, #0
   d41fe:	4621      	mov	r1, r4
  while((time2-time1)<2000) {
    time2=millis();
  }

 delay(30000);
   d4200:	b002      	add	sp, #8
   d4202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
/****************************** Feeds ***************************************/ 
// Setup a feed called <object> for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish object1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/feedname1");
Adafruit_MQTT_Publish object2 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/feedname2");
   d4206:	f000 bac1 	b.w	d478c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
   d420a:	bf00      	nop
   d420c:	2003e2ec 	.word	0x2003e2ec
   d4210:	2003e2dc 	.word	0x2003e2dc
   d4214:	2003e314 	.word	0x2003e314
   d4218:	000d40cd 	.word	0x000d40cd
   d421c:	000d5f67 	.word	0x000d5f67
   d4220:	000d5f4c 	.word	0x000d5f4c
   d4224:	000d5f57 	.word	0x000d5f57
   d4228:	000d5fac 	.word	0x000d5fac
   d422c:	000d40c9 	.word	0x000d40c9
   d4230:	000d5f6d 	.word	0x000d5f6d
   d4234:	2003e308 	.word	0x2003e308
   d4238:	000d5f88 	.word	0x000d5f88
   d423c:	2003e2e0 	.word	0x2003e2e0

000d4240 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4240:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4242:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4246:	6803      	ldr	r3, [r0, #0]
   d4248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d424a:	4798      	blx	r3
}
   d424c:	3000      	adds	r0, #0
   d424e:	bf18      	it	ne
   d4250:	2001      	movne	r0, #1
   d4252:	bd08      	pop	{r3, pc}

000d4254 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4256:	4606      	mov	r6, r0
   d4258:	460f      	mov	r7, r1
   d425a:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d425c:	b1c4      	cbz	r4, d4290 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d425e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4262:	6803      	ldr	r3, [r0, #0]
   d4264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4266:	4798      	blx	r3
   d4268:	b908      	cbnz	r0, d426e <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d426a:	2000      	movs	r0, #0
   d426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d426e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4272:	2cfa      	cmp	r4, #250	; 0xfa
   d4274:	6803      	ldr	r3, [r0, #0]
   d4276:	4625      	mov	r5, r4
   d4278:	bfa8      	it	ge
   d427a:	25fa      	movge	r5, #250	; 0xfa
   d427c:	68db      	ldr	r3, [r3, #12]
   d427e:	462a      	mov	r2, r5
   d4280:	4639      	mov	r1, r7
   d4282:	4798      	blx	r3
   d4284:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4286:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4288:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d428a:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d428c:	d0e6      	beq.n	d425c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d428e:	e7ec      	b.n	d426a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4290:	2001      	movs	r0, #1
}
   d4292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4294 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4298:	4606      	mov	r6, r0
   d429a:	4688      	mov	r8, r1
   d429c:	4691      	mov	r9, r2
   d429e:	461f      	mov	r7, r3
   d42a0:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d42a2:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d42a4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d42a8:	6803      	ldr	r3, [r0, #0]
   d42aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42ac:	4798      	blx	r3
   d42ae:	b1d0      	cbz	r0, d42e6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d42b0:	2d00      	cmp	r5, #0
   d42b2:	db18      	blt.n	d42e6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d42b4:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d42b8:	6803      	ldr	r3, [r0, #0]
   d42ba:	691b      	ldr	r3, [r3, #16]
   d42bc:	4798      	blx	r3
   d42be:	b160      	cbz	r0, d42da <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d42c0:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d42c4:	6803      	ldr	r3, [r0, #0]
   d42c6:	695b      	ldr	r3, [r3, #20]
   d42c8:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d42ca:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d42ce:	3401      	adds	r4, #1
   d42d0:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d42d2:	454c      	cmp	r4, r9
   d42d4:	d007      	beq.n	d42e6 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d42d6:	463d      	mov	r5, r7
   d42d8:	e7ec      	b.n	d42b4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d42da:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d42dc:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d42de:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d42e0:	f000 fd56 	bl	d4d90 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d42e4:	e7de      	b.n	d42a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d42e6:	4620      	mov	r0, r4
   d42e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d42ec <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d42ec:	b570      	push	{r4, r5, r6, lr}
   d42ee:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d42f0:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d42f4:	2296      	movs	r2, #150	; 0x96
   d42f6:	2100      	movs	r1, #0
   d42f8:	4628      	mov	r0, r5
   d42fa:	f001 fd8f 	bl	d5e1c <memset>
  strcpy((char *)buffer, servername);
   d42fe:	6861      	ldr	r1, [r4, #4]
   d4300:	4628      	mov	r0, r5
   d4302:	f001 fdf5 	bl	d5ef0 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d4306:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d430a:	8922      	ldrh	r2, [r4, #8]
   d430c:	6803      	ldr	r3, [r0, #0]
   d430e:	4629      	mov	r1, r5
   d4310:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d4312:	2300      	movs	r3, #0
   d4314:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d4316:	3000      	adds	r0, #0
   d4318:	bf18      	it	ne
   d431a:	2001      	movne	r0, #1
   d431c:	bd70      	pop	{r4, r5, r6, pc}

000d431e <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d431e:	b510      	push	{r4, lr}
   d4320:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d4322:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4326:	6803      	ldr	r3, [r0, #0]
   d4328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d432a:	4798      	blx	r3
   d432c:	b120      	cbz	r0, d4338 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d432e:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d4332:	6803      	ldr	r3, [r0, #0]
   d4334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4336:	4798      	blx	r3
  }
  return true;
}
   d4338:	2001      	movs	r0, #1
   d433a:	bd10      	pop	{r4, pc}

000d433c <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d433c:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d433e:	6803      	ldr	r3, [r0, #0]
   d4340:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d4342:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d4344:	4798      	blx	r3
   d4346:	b9c8      	cbnz	r0, d437c <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4348:	4620      	mov	r0, r4
   d434a:	f000 f9c6 	bl	d46da <_ZN13Adafruit_MQTT7connectEv>
   d434e:	2504      	movs	r5, #4
   d4350:	b170      	cbz	r0, d4370 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d4352:	3d01      	subs	r5, #1
   d4354:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4358:	d00a      	beq.n	d4370 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d435a:	4620      	mov	r0, r4
   d435c:	f000 f8aa 	bl	d44b4 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d4360:	f241 3088 	movw	r0, #5000	; 0x1388
   d4364:	f000 fd14 	bl	d4d90 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4368:	4620      	mov	r0, r4
   d436a:	f000 f9b6 	bl	d46da <_ZN13Adafruit_MQTT7connectEv>
   d436e:	e7ef      	b.n	d4350 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d4370:	6823      	ldr	r3, [r4, #0]
   d4372:	4620      	mov	r0, r4
   d4374:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d4376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d437a:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d437c:	bd70      	pop	{r4, r5, r6, pc}

000d437e <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d437e:	f000 ba2d 	b.w	d47dc <HAL_Pin_Map>

000d4382 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4382:	b570      	push	{r4, r5, r6, lr}
   d4384:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d4386:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4388:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d438a:	f001 fdb9 	bl	d5f00 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d438e:	1203      	asrs	r3, r0, #8
   d4390:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d4392:	7060      	strb	r0, [r4, #1]
   d4394:	b285      	uxth	r5, r0
   d4396:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d4398:	462a      	mov	r2, r5
   d439a:	4631      	mov	r1, r6
   d439c:	4620      	mov	r0, r4
   d439e:	f001 fdb7 	bl	d5f10 <strncpy>
  return p+len;
}
   d43a2:	1960      	adds	r0, r4, r5
   d43a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d43a8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d43a8:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d43aa:	6103      	str	r3, [r0, #16]
  password = pass;
   d43ac:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d43ae:	4d0d      	ldr	r5, [pc, #52]	; (d43e4 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d43b0:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d43b2:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d43b4:	4a0c      	ldr	r2, [pc, #48]	; (d43e8 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d43b6:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d43b8:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d43ba:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d43bc:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d43be:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d43c2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d43c6:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d43ca:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d43ce:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d43d2:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d43d4:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d43d6:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d43da:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d43de:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d43e2:	bd30      	pop	{r4, r5, pc}
   d43e4:	000d5fd0 	.word	0x000d5fd0
   d43e8:	000d5ff9 	.word	0x000d5ff9

000d43ec <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d43ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d43f0:	fa0f fa83 	sxth.w	sl, r3
   d43f4:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d43f6:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d43f8:	699d      	ldr	r5, [r3, #24]
   d43fa:	2201      	movs	r2, #1
   d43fc:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d43fe:	4606      	mov	r6, r0
   d4400:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d4402:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d4404:	b2c0      	uxtb	r0, r0
   d4406:	2801      	cmp	r0, #1
   d4408:	d001      	beq.n	d440e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d440a:	2000      	movs	r0, #0
   d440c:	e034      	b.n	d4478 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d440e:	1c65      	adds	r5, r4, #1
   d4410:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d4414:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d4416:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d441a:	6833      	ldr	r3, [r6, #0]
   d441c:	699b      	ldr	r3, [r3, #24]
   d441e:	2201      	movs	r2, #1
   d4420:	461f      	mov	r7, r3
   d4422:	4629      	mov	r1, r5
   d4424:	4653      	mov	r3, sl
   d4426:	4630      	mov	r0, r6
   d4428:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d442a:	b2c0      	uxtb	r0, r0
   d442c:	2801      	cmp	r0, #1
   d442e:	d1ec      	bne.n	d440a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d4430:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d4434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d4438:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d443a:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d443e:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d4442:	d0e2      	beq.n	d440a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d4444:	061b      	lsls	r3, r3, #24
   d4446:	d4e8      	bmi.n	d441a <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d4448:	9b01      	ldr	r3, [sp, #4]
   d444a:	1b2c      	subs	r4, r5, r4
   d444c:	1b1b      	subs	r3, r3, r4
   d444e:	3b01      	subs	r3, #1
   d4450:	4599      	cmp	r9, r3
   d4452:	6833      	ldr	r3, [r6, #0]
   d4454:	d906      	bls.n	d4464 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d4456:	9a01      	ldr	r2, [sp, #4]
   d4458:	699f      	ldr	r7, [r3, #24]
   d445a:	3a01      	subs	r2, #1
   d445c:	1b12      	subs	r2, r2, r4
   d445e:	4653      	mov	r3, sl
   d4460:	b292      	uxth	r2, r2
   d4462:	e003      	b.n	d446c <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d4464:	699f      	ldr	r7, [r3, #24]
   d4466:	fa1f f289 	uxth.w	r2, r9
   d446a:	4653      	mov	r3, sl
   d446c:	4629      	mov	r1, r5
   d446e:	4630      	mov	r0, r6
   d4470:	47b8      	blx	r7
   d4472:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d4474:	4420      	add	r0, r4
   d4476:	b280      	uxth	r0, r0
}
   d4478:	b003      	add	sp, #12
   d447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d4480 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d4480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4482:	4605      	mov	r5, r0
   d4484:	460c      	mov	r4, r1
   d4486:	4616      	mov	r6, r2
   d4488:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d448a:	463b      	mov	r3, r7
   d448c:	2296      	movs	r2, #150	; 0x96
   d448e:	4621      	mov	r1, r4
   d4490:	4628      	mov	r0, r5
   d4492:	f7ff ffab 	bl	d43ec <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d4496:	b148      	cbz	r0, d44ac <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d4498:	7823      	ldrb	r3, [r4, #0]
   d449a:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d449e:	d005      	beq.n	d44ac <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d44a0:	f000 fe04 	bl	d50ac <_Z16_fetch_usbserialv>
   d44a4:	4902      	ldr	r1, [pc, #8]	; (d44b0 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d44a6:	f000 fc36 	bl	d4d16 <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d44aa:	e7ee      	b.n	d448a <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d44ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d44ae:	bf00      	nop
   d44b0:	000d5ffa 	.word	0x000d5ffa

000d44b4 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d44b4:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d44b6:	23e0      	movs	r3, #224	; 0xe0
   d44b8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d44bc:	2300      	movs	r3, #0
   d44be:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d44c2:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d44c4:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d44c6:	695b      	ldr	r3, [r3, #20]
   d44c8:	2202      	movs	r2, #2
   d44ca:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d44ce:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d44d0:	6823      	ldr	r3, [r4, #0]
   d44d2:	4620      	mov	r0, r4
   d44d4:	691b      	ldr	r3, [r3, #16]

}
   d44d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d44da:	4718      	bx	r3

000d44dc <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d44dc:	b538      	push	{r3, r4, r5, lr}
   d44de:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d44e0:	4608      	mov	r0, r1
   d44e2:	2310      	movs	r3, #16
   d44e4:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d44e8:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d44ea:	4929      	ldr	r1, [pc, #164]	; (d4590 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d44ec:	f7ff ff49 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d44f0:	2304      	movs	r3, #4
   d44f2:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d44f4:	2302      	movs	r3, #2
   d44f6:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d44f8:	69a3      	ldr	r3, [r4, #24]
   d44fa:	b1ab      	cbz	r3, d4528 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d44fc:	781b      	ldrb	r3, [r3, #0]
   d44fe:	b19b      	cbz	r3, d4528 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d4500:	2306      	movs	r3, #6
   d4502:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d4504:	f894 3020 	ldrb.w	r3, [r4, #32]
   d4508:	2b01      	cmp	r3, #1
   d450a:	d101      	bne.n	d4510 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d450c:	230e      	movs	r3, #14
   d450e:	e002      	b.n	d4516 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d4510:	2b02      	cmp	r3, #2
   d4512:	d101      	bne.n	d4518 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4514:	231e      	movs	r3, #30
   d4516:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d4518:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d451c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d451e:	bf02      	ittt	eq
   d4520:	7843      	ldrbeq	r3, [r0, #1]
   d4522:	f043 0320 	orreq.w	r3, r3, #32
   d4526:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d4528:	6923      	ldr	r3, [r4, #16]
   d452a:	781b      	ldrb	r3, [r3, #0]
   d452c:	b11b      	cbz	r3, d4536 <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d452e:	7843      	ldrb	r3, [r0, #1]
   d4530:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4534:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d4536:	6963      	ldr	r3, [r4, #20]
   d4538:	781b      	ldrb	r3, [r3, #0]
   d453a:	b11b      	cbz	r3, d4544 <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d453c:	7843      	ldrb	r3, [r0, #1]
   d453e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d4542:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d4544:	2301      	movs	r3, #1
   d4546:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d4548:	232c      	movs	r3, #44	; 0x2c
   d454a:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d454c:	68e1      	ldr	r1, [r4, #12]
   d454e:	780b      	ldrb	r3, [r1, #0]
   d4550:	b11b      	cbz	r3, d455a <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d4552:	3004      	adds	r0, #4
   d4554:	f7ff ff15 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
   d4558:	e002      	b.n	d4560 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d455a:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d455c:	7143      	strb	r3, [r0, #5]
      p++;
   d455e:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4560:	69a1      	ldr	r1, [r4, #24]
   d4562:	b131      	cbz	r1, d4572 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d4564:	780b      	ldrb	r3, [r1, #0]
   d4566:	b123      	cbz	r3, d4572 <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d4568:	f7ff ff0b 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d456c:	69e1      	ldr	r1, [r4, #28]
   d456e:	f7ff ff08 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d4572:	6921      	ldr	r1, [r4, #16]
   d4574:	780b      	ldrb	r3, [r1, #0]
   d4576:	b10b      	cbz	r3, d457c <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d4578:	f7ff ff03 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d457c:	6961      	ldr	r1, [r4, #20]
   d457e:	780b      	ldrb	r3, [r1, #0]
   d4580:	b10b      	cbz	r3, d4586 <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d4582:	f7ff fefe 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d4586:	1b40      	subs	r0, r0, r5
   d4588:	b2c0      	uxtb	r0, r0
   d458a:	1e83      	subs	r3, r0, #2
   d458c:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d458e:	bd38      	pop	{r3, r4, r5, pc}
   d4590:	000d6019 	.word	0x000d6019

000d4594 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4598:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d459a:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d459c:	460e      	mov	r6, r1
   d459e:	4691      	mov	r9, r2
   d45a0:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45a2:	f001 fcad 	bl	d5f00 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d45a6:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d45aa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45ae:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d45b0:	f1b8 0f00 	cmp.w	r8, #0
   d45b4:	d101      	bne.n	d45ba <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d45b6:	1c83      	adds	r3, r0, #2
   d45b8:	e000      	b.n	d45bc <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d45ba:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d45bc:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d45c0:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d45c2:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d45c4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d45c8:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d45ca:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d45ce:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d45d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d45d4:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d45d6:	bf18      	it	ne
   d45d8:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d45dc:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d45e0:	2b00      	cmp	r3, #0
   d45e2:	d1f5      	bne.n	d45d0 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d45e4:	4649      	mov	r1, r9
   d45e6:	f7ff fecc 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>
   d45ea:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d45ec:	f1b8 0f00 	cmp.w	r8, #0
   d45f0:	d00c      	beq.n	d460c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d45f2:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d45f6:	0a12      	lsrs	r2, r2, #8
   d45f8:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d45fa:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d45fe:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d4600:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4604:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d4606:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d4608:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d460c:	4622      	mov	r2, r4
   d460e:	4639      	mov	r1, r7
   d4610:	4618      	mov	r0, r3
   d4612:	f001 fbe8 	bl	d5de6 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d4616:	4420      	add	r0, r4
   d4618:	1b80      	subs	r0, r0, r6
}
   d461a:	b280      	uxth	r0, r0
   d461c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4620 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4620:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4622:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d4626:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d462a:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d462c:	e88d 0048 	stmia.w	sp, {r3, r6}
   d4630:	4613      	mov	r3, r2
   d4632:	460a      	mov	r2, r1
   d4634:	4629      	mov	r1, r5
   d4636:	f7ff ffad 	bl	d4594 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d463a:	6823      	ldr	r3, [r4, #0]
   d463c:	4602      	mov	r2, r0
   d463e:	695b      	ldr	r3, [r3, #20]
   d4640:	4629      	mov	r1, r5
   d4642:	4620      	mov	r0, r4
   d4644:	4798      	blx	r3
   d4646:	b908      	cbnz	r0, d464c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d4648:	2000      	movs	r0, #0
   d464a:	e017      	b.n	d467c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d464c:	b1b6      	cbz	r6, d467c <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d464e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4652:	2296      	movs	r2, #150	; 0x96
   d4654:	4629      	mov	r1, r5
   d4656:	4620      	mov	r0, r4
   d4658:	f7ff fec8 	bl	d43ec <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d465c:	2804      	cmp	r0, #4
   d465e:	d1f3      	bne.n	d4648 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d4660:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4664:	111b      	asrs	r3, r3, #4
   d4666:	2b04      	cmp	r3, #4
   d4668:	d1ee      	bne.n	d4648 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d466a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d466c:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d4670:	ba5b      	rev16	r3, r3
   d4672:	3301      	adds	r3, #1
   d4674:	b29b      	uxth	r3, r3
   d4676:	1ac3      	subs	r3, r0, r3
   d4678:	4258      	negs	r0, r3
   d467a:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d467c:	b002      	add	sp, #8
   d467e:	bd70      	pop	{r4, r5, r6, pc}

000d4680 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d4680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4682:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d4684:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d4686:	461f      	mov	r7, r3
   d4688:	460e      	mov	r6, r1
   d468a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d468c:	f001 fc38 	bl	d5f00 <strlen>
   d4690:	9700      	str	r7, [sp, #0]
   d4692:	b283      	uxth	r3, r0
   d4694:	4622      	mov	r2, r4
   d4696:	4631      	mov	r1, r6
   d4698:	4628      	mov	r0, r5
   d469a:	f7ff ffc1 	bl	d4620 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d469e:	b003      	add	sp, #12
   d46a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46a2 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d46a2:	b538      	push	{r3, r4, r5, lr}
   d46a4:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d46a6:	2382      	movs	r3, #130	; 0x82
   d46a8:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d46aa:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d46ac:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d46b0:	0a09      	lsrs	r1, r1, #8
   d46b2:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d46b4:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d46b8:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d46ba:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d46be:	3101      	adds	r1, #1
   d46c0:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d46c4:	4611      	mov	r1, r2
   d46c6:	1d20      	adds	r0, r4, #4
   d46c8:	f7ff fe5b 	bl	d4382 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d46cc:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d46d0:	1b00      	subs	r0, r0, r4
   d46d2:	b2c0      	uxtb	r0, r0
   d46d4:	1e83      	subs	r3, r0, #2
   d46d6:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d46d8:	bd38      	pop	{r3, r4, r5, pc}

000d46da <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d46da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d46de:	6803      	ldr	r3, [r0, #0]
   d46e0:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d46e2:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d46e4:	4798      	blx	r3
   d46e6:	b918      	cbnz	r0, d46f0 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d46e8:	f04f 30ff 	mov.w	r0, #4294967295
   d46ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d46f0:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d46f4:	4629      	mov	r1, r5
   d46f6:	4620      	mov	r0, r4
   d46f8:	f7ff fef0 	bl	d44dc <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d46fc:	6823      	ldr	r3, [r4, #0]
   d46fe:	b282      	uxth	r2, r0
   d4700:	695b      	ldr	r3, [r3, #20]
   d4702:	4629      	mov	r1, r5
   d4704:	4620      	mov	r0, r4
   d4706:	4798      	blx	r3
   d4708:	2800      	cmp	r0, #0
   d470a:	d0ed      	beq.n	d46e8 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d470c:	f241 7370 	movw	r3, #6000	; 0x1770
   d4710:	2296      	movs	r2, #150	; 0x96
   d4712:	4629      	mov	r1, r5
   d4714:	4620      	mov	r0, r4
   d4716:	f7ff fe69 	bl	d43ec <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d471a:	b2c0      	uxtb	r0, r0
   d471c:	2804      	cmp	r0, #4
   d471e:	d1e3      	bne.n	d46e8 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4720:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4722:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d4726:	d1df      	bne.n	d46e8 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d4728:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d472c:	b110      	cbz	r0, d4734 <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d472e:	b240      	sxtb	r0, r0
   d4730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4734:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d4738:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d473c:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d4740:	b1fb      	cbz	r3, d4782 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4742:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d4744:	683a      	ldr	r2, [r7, #0]
   d4746:	4629      	mov	r1, r5
   d4748:	7913      	ldrb	r3, [r2, #4]
   d474a:	6812      	ldr	r2, [r2, #0]
   d474c:	4620      	mov	r0, r4
   d474e:	f7ff ffa8 	bl	d46a2 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d4752:	6823      	ldr	r3, [r4, #0]
   d4754:	b282      	uxth	r2, r0
   d4756:	695b      	ldr	r3, [r3, #20]
   d4758:	4629      	mov	r1, r5
   d475a:	4620      	mov	r0, r4
   d475c:	4798      	blx	r3
   d475e:	2800      	cmp	r0, #0
   d4760:	d0c2      	beq.n	d46e8 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d4762:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4766:	2209      	movs	r2, #9
   d4768:	4629      	mov	r1, r5
   d476a:	4620      	mov	r0, r4
   d476c:	f7ff fe88 	bl	d4480 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d4770:	b938      	cbnz	r0, d4782 <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d4772:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d4774:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4778:	d1e4      	bne.n	d4744 <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d477a:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d477e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4782:	4547      	cmp	r7, r8
   d4784:	d1da      	bne.n	d473c <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d4786:	2000      	movs	r0, #0
   d4788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d478c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d478c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d478e:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d4792:	7203      	strb	r3, [r0, #8]
}
   d4794:	bd10      	pop	{r4, pc}

000d4796 <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d4796:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4798:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d479a:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d479c:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d479e:	a901      	add	r1, sp, #4
   d47a0:	f000 fa28 	bl	d4bf4 <ltoa>
  return mqtt->publish(topic, payload, qos);
   d47a4:	7a23      	ldrb	r3, [r4, #8]
   d47a6:	aa01      	add	r2, sp, #4
   d47a8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d47ac:	f7ff ff68 	bl	d4680 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d47b0:	b004      	add	sp, #16
   d47b2:	bd10      	pop	{r4, pc}

000d47b4 <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d47b4:	f7ff bfef 	b.w	d4796 <_ZN21Adafruit_MQTT_Publish7publishEl>

000d47b8 <_GLOBAL__sub_I__Z11printBufferPht>:
   d47b8:	f000 b810 	b.w	d47dc <HAL_Pin_Map>

000d47bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <netdb_freeaddrinfo+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	689b      	ldr	r3, [r3, #8]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030268 	.word	0x00030268

000d47cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <netdb_getaddrinfo+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	68db      	ldr	r3, [r3, #12]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030268 	.word	0x00030268

000d47dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <HAL_Pin_Map+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	681b      	ldr	r3, [r3, #0]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	0003022c 	.word	0x0003022c

000d47ec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <if_index_to_name+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	695b      	ldr	r3, [r3, #20]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	0003026c 	.word	0x0003026c

000d47fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <HAL_RNG_GetRandomNumber+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	685b      	ldr	r3, [r3, #4]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030218 	.word	0x00030218

000d480c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <HAL_Delay_Microseconds+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	68db      	ldr	r3, [r3, #12]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030218 	.word	0x00030218

000d481c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	695b      	ldr	r3, [r3, #20]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030218 	.word	0x00030218

000d482c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <os_thread_is_current+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	689b      	ldr	r3, [r3, #8]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030248 	.word	0x00030248

000d483c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <os_thread_join+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	691b      	ldr	r3, [r3, #16]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030248 	.word	0x00030248

000d484c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <os_thread_cleanup+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	695b      	ldr	r3, [r3, #20]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030248 	.word	0x00030248

000d485c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <os_mutex_recursive_create+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030248 	.word	0x00030248

000d486c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <os_mutex_recursive_destroy+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030248 	.word	0x00030248

000d487c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <inet_inet_ntop+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	695b      	ldr	r3, [r3, #20]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030264 	.word	0x00030264

000d488c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <inet_htonl+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6a1b      	ldr	r3, [r3, #32]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030264 	.word	0x00030264

000d489c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <inet_htons+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	00030264 	.word	0x00030264

000d48ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <HAL_USART_Init+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	681b      	ldr	r3, [r3, #0]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003023c 	.word	0x0003023c

000d48bc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <HAL_USART_Write_Data+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	68db      	ldr	r3, [r3, #12]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003023c 	.word	0x0003023c

000d48cc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <HAL_USART_Available_Data+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	691b      	ldr	r3, [r3, #16]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003023c 	.word	0x0003023c

000d48dc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <HAL_USART_Read_Data+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	695b      	ldr	r3, [r3, #20]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003023c 	.word	0x0003023c

000d48ec <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <HAL_USART_Peek_Data+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	699b      	ldr	r3, [r3, #24]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	0003023c 	.word	0x0003023c

000d48fc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <HAL_USART_Flush_Data+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	69db      	ldr	r3, [r3, #28]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	0003023c 	.word	0x0003023c

000d490c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <HAL_USART_Available_Data_For_Write+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003023c 	.word	0x0003023c

000d491c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <sock_setsockopt+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	699b      	ldr	r3, [r3, #24]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	00030238 	.word	0x00030238

000d492c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <sock_close+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	69db      	ldr	r3, [r3, #28]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	00030238 	.word	0x00030238

000d493c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <sock_connect+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	6a1b      	ldr	r3, [r3, #32]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	00030238 	.word	0x00030238

000d494c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <sock_recv+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	00030238 	.word	0x00030238

000d495c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <sock_send+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	00030238 	.word	0x00030238

000d496c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <sock_socket+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	00030238 	.word	0x00030238

000d497c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_USB_USART_Init+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	681b      	ldr	r3, [r3, #0]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	0003024c 	.word	0x0003024c

000d498c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <HAL_USB_USART_Available_Data+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	691b      	ldr	r3, [r3, #16]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	0003024c 	.word	0x0003024c

000d499c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	695b      	ldr	r3, [r3, #20]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	0003024c 	.word	0x0003024c

000d49ac <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b02      	ldr	r3, [pc, #8]	; (d49b8 <HAL_USB_USART_Receive_Data+0xc>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	699b      	ldr	r3, [r3, #24]
   d49b4:	9301      	str	r3, [sp, #4]
   d49b6:	bd08      	pop	{r3, pc}
   d49b8:	0003024c 	.word	0x0003024c

000d49bc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <HAL_USB_USART_Send_Data+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	69db      	ldr	r3, [r3, #28]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	0003024c 	.word	0x0003024c

000d49cc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <HAL_USB_USART_Flush_Data+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	6a1b      	ldr	r3, [r3, #32]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	0003024c 	.word	0x0003024c

000d49dc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <panic_+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	00030260 	.word	0x00030260

000d49ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <log_message+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030260 	.word	0x00030260

000d49fc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <set_system_mode+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	685b      	ldr	r3, [r3, #4]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030220 	.word	0x00030220

000d4a0c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <system_delay_ms+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	695b      	ldr	r3, [r3, #20]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030220 	.word	0x00030220

000d4a1c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b03      	ldr	r3, [pc, #12]	; (d4a2c <system_ctrl_set_app_request_handler+0x10>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4a26:	9301      	str	r3, [sp, #4]
   d4a28:	bd08      	pop	{r3, pc}
   d4a2a:	0000      	.short	0x0000
   d4a2c:	00030220 	.word	0x00030220

000d4a30 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b03      	ldr	r3, [pc, #12]	; (d4a40 <system_ctrl_set_result+0x10>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4a3a:	9301      	str	r3, [sp, #4]
   d4a3c:	bd08      	pop	{r3, pc}
   d4a3e:	0000      	.short	0x0000
   d4a40:	00030220 	.word	0x00030220

000d4a44 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <network_connect+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	685b      	ldr	r3, [r3, #4]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030240 	.word	0x00030240

000d4a54 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <network_connecting+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	689b      	ldr	r3, [r3, #8]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030240 	.word	0x00030240

000d4a64 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <network_disconnect+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	68db      	ldr	r3, [r3, #12]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030240 	.word	0x00030240

000d4a74 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <network_ready+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	691b      	ldr	r3, [r3, #16]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030240 	.word	0x00030240

000d4a84 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <network_on+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030240 	.word	0x00030240

000d4a94 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <network_off+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	699b      	ldr	r3, [r3, #24]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030240 	.word	0x00030240

000d4aa4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <network_listen+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	69db      	ldr	r3, [r3, #28]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030240 	.word	0x00030240

000d4ab4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <network_listening+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a1b      	ldr	r3, [r3, #32]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030240 	.word	0x00030240

000d4ac4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <network_set_listen_timeout+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030240 	.word	0x00030240

000d4ad4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <network_get_listen_timeout+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030240 	.word	0x00030240

000d4ae4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030244 	.word	0x00030244

000d4af4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <malloc+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	681b      	ldr	r3, [r3, #0]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	0003021c 	.word	0x0003021c

000d4b04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <free+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	685b      	ldr	r3, [r3, #4]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	0003021c 	.word	0x0003021c

000d4b14 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <__errno+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	0003021c 	.word	0x0003021c

000d4b24 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b24:	2200      	movs	r2, #0
   d4b26:	4611      	mov	r1, r2
   d4b28:	6840      	ldr	r0, [r0, #4]
   d4b2a:	f7ff bfc3 	b.w	d4ab4 <network_listening>

000d4b2e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b2e:	2200      	movs	r2, #0
   d4b30:	4611      	mov	r1, r2
   d4b32:	6840      	ldr	r0, [r0, #4]
   d4b34:	f7ff bfce 	b.w	d4ad4 <network_get_listen_timeout>

000d4b38 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b38:	2200      	movs	r2, #0
   d4b3a:	6840      	ldr	r0, [r0, #4]
   d4b3c:	f7ff bfc2 	b.w	d4ac4 <network_set_listen_timeout>

000d4b40 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b40:	2200      	movs	r2, #0
   d4b42:	f081 0101 	eor.w	r1, r1, #1
   d4b46:	6840      	ldr	r0, [r0, #4]
   d4b48:	f7ff bfac 	b.w	d4aa4 <network_listen>

000d4b4c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b4c:	2300      	movs	r3, #0
   d4b4e:	461a      	mov	r2, r3
   d4b50:	4619      	mov	r1, r3
   d4b52:	6840      	ldr	r0, [r0, #4]
   d4b54:	f7ff bf9e 	b.w	d4a94 <network_off>

000d4b58 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b58:	2300      	movs	r3, #0
   d4b5a:	461a      	mov	r2, r3
   d4b5c:	4619      	mov	r1, r3
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff bf90 	b.w	d4a84 <network_on>

000d4b64 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b64:	2200      	movs	r2, #0
   d4b66:	4611      	mov	r1, r2
   d4b68:	6840      	ldr	r0, [r0, #4]
   d4b6a:	f7ff bf83 	b.w	d4a74 <network_ready>

000d4b6e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b6e:	2200      	movs	r2, #0
   d4b70:	4611      	mov	r1, r2
   d4b72:	6840      	ldr	r0, [r0, #4]
   d4b74:	f7ff bf6e 	b.w	d4a54 <network_connecting>

000d4b78 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b78:	2200      	movs	r2, #0
   d4b7a:	2102      	movs	r1, #2
   d4b7c:	6840      	ldr	r0, [r0, #4]
   d4b7e:	f7ff bf71 	b.w	d4a64 <network_disconnect>

000d4b82 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b82:	2300      	movs	r3, #0
   d4b84:	461a      	mov	r2, r3
   d4b86:	6840      	ldr	r0, [r0, #4]
   d4b88:	f7ff bf5c 	b.w	d4a44 <network_connect>

000d4b8c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b8c:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b8e:	2203      	movs	r2, #3
   d4b90:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b92:	4a02      	ldr	r2, [pc, #8]	; (d4b9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b94:	601a      	str	r2, [r3, #0]
   d4b96:	4770      	bx	lr
   d4b98:	2003e3f8 	.word	0x2003e3f8
   d4b9c:	000d61e8 	.word	0x000d61e8

000d4ba0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4ba4:	6800      	ldr	r0, [r0, #0]
   d4ba6:	b118      	cbz	r0, d4bb0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4ba8:	f7ff ffac 	bl	d4b04 <free>
            wakeupSource_ = nullptr;
   d4bac:	2300      	movs	r3, #0
   d4bae:	6023      	str	r3, [r4, #0]
   d4bb0:	bd10      	pop	{r4, pc}

000d4bb2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4bb2:	b510      	push	{r4, lr}
   d4bb4:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4bb6:	f7ff fff3 	bl	d4ba0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4bba:	4620      	mov	r0, r4
   d4bbc:	bd10      	pop	{r4, pc}
	...

000d4bc0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bc0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bc2:	4c09      	ldr	r4, [pc, #36]	; (d4be8 <_GLOBAL__sub_I_System+0x28>)
   d4bc4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bca:	6020      	str	r0, [r4, #0]
   d4bcc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4bce:	71a0      	strb	r0, [r4, #6]
   d4bd0:	8120      	strh	r0, [r4, #8]
   d4bd2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bd4:	f7ff ff12 	bl	d49fc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4bd8:	4620      	mov	r0, r4
   d4bda:	4a04      	ldr	r2, [pc, #16]	; (d4bec <_GLOBAL__sub_I_System+0x2c>)
   d4bdc:	4904      	ldr	r1, [pc, #16]	; (d4bf0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4be2:	f000 bf83 	b.w	d5aec <__aeabi_atexit>
   d4be6:	bf00      	nop
   d4be8:	2003e400 	.word	0x2003e400
   d4bec:	2003e2dc 	.word	0x2003e2dc
   d4bf0:	000d4bb3 	.word	0x000d4bb3

000d4bf4 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d4bf8:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d4bfa:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4bfc:	4615      	mov	r5, r2
   d4bfe:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d4c00:	bf34      	ite	cc
   d4c02:	4615      	movcc	r5, r2
   d4c04:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4c06:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d4c08:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d4c0a:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d4c0c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d4c10:	d107      	bne.n	d4c22 <ltoa+0x2e>
   d4c12:	4298      	cmp	r0, r3
   d4c14:	da05      	bge.n	d4c22 <ltoa+0x2e>
      {
            *head++ = '-';
   d4c16:	232d      	movs	r3, #45	; 0x2d
   d4c18:	f101 0801 	add.w	r8, r1, #1
   d4c1c:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d4c1e:	4240      	negs	r0, r0
   d4c20:	e001      	b.n	d4c26 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d4c22:	b1b0      	cbz	r0, d4c52 <ltoa+0x5e>
   d4c24:	46a0      	mov	r8, r4
   d4c26:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d4c2a:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d4c2c:	462a      	mov	r2, r5
   d4c2e:	4601      	mov	r1, r0
   d4c30:	a801      	add	r0, sp, #4
   d4c32:	f001 f8b9 	bl	d5da8 <ldiv>
   d4c36:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d4c38:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d4c3a:	2b09      	cmp	r3, #9
   d4c3c:	bfcc      	ite	gt
   d4c3e:	2237      	movgt	r2, #55	; 0x37
   d4c40:	2230      	movle	r2, #48	; 0x30
   d4c42:	fa52 f383 	uxtab	r3, r2, r3
   d4c46:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d4c4a:	3701      	adds	r7, #1
   d4c4c:	2800      	cmp	r0, #0
   d4c4e:	d1ed      	bne.n	d4c2c <ltoa+0x38>
   d4c50:	e006      	b.n	d4c60 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d4c52:	2330      	movs	r3, #48	; 0x30
   d4c54:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d4c58:	46a0      	mov	r8, r4
   d4c5a:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d4c5e:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d4c60:	463a      	mov	r2, r7
   d4c62:	1c71      	adds	r1, r6, #1
   d4c64:	4640      	mov	r0, r8
   d4c66:	f001 f8b3 	bl	d5dd0 <memcpy>
      return str;
}
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	b00c      	add	sp, #48	; 0x30
   d4c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c72 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c72:	b510      	push	{r4, lr}
   d4c74:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c76:	6800      	ldr	r0, [r0, #0]
   d4c78:	b108      	cbz	r0, d4c7e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c7a:	f7ff fdf7 	bl	d486c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4c7e:	4620      	mov	r0, r4
   d4c80:	bd10      	pop	{r4, pc}
	...

000d4c84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c84:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c86:	4c06      	ldr	r4, [pc, #24]	; (d4ca0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4c88:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4c8a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c8c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4c8e:	f7ff fde5 	bl	d485c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c92:	4620      	mov	r0, r4
   d4c94:	4a03      	ldr	r2, [pc, #12]	; (d4ca4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4c96:	4904      	ldr	r1, [pc, #16]	; (d4ca8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4c9c:	f000 bf26 	b.w	d5aec <__aeabi_atexit>
   d4ca0:	2003e40c 	.word	0x2003e40c
   d4ca4:	2003e2dc 	.word	0x2003e2dc
   d4ca8:	000d4c73 	.word	0x000d4c73

000d4cac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cae:	4606      	mov	r6, r0
   d4cb0:	460d      	mov	r5, r1
   d4cb2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4cb4:	2400      	movs	r4, #0
  while (size--) {
   d4cb6:	42bd      	cmp	r5, r7
   d4cb8:	d00c      	beq.n	d4cd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cba:	6833      	ldr	r3, [r6, #0]
   d4cbc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cc0:	689b      	ldr	r3, [r3, #8]
   d4cc2:	4630      	mov	r0, r6
   d4cc4:	4798      	blx	r3
     if (chunk>=0)
   d4cc6:	2800      	cmp	r0, #0
   d4cc8:	db01      	blt.n	d4cce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4ccc:	e7f3      	b.n	d4cb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4cce:	2c00      	cmp	r4, #0
   d4cd0:	bf08      	it	eq
   d4cd2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cd8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4cd8:	b570      	push	{r4, r5, r6, lr}
   d4cda:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4cdc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4cde:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ce0:	b149      	cbz	r1, d4cf6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ce2:	f001 f90d 	bl	d5f00 <strlen>
   d4ce6:	682b      	ldr	r3, [r5, #0]
   d4ce8:	4602      	mov	r2, r0
   d4cea:	4621      	mov	r1, r4
   d4cec:	4628      	mov	r0, r5
   d4cee:	68db      	ldr	r3, [r3, #12]
    }
   d4cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4cf4:	4718      	bx	r3
    }
   d4cf6:	bd70      	pop	{r4, r5, r6, pc}

000d4cf8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4cf8:	6803      	ldr	r3, [r0, #0]
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	4718      	bx	r3

000d4cfe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4cfe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d00:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d02:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d04:	f7ff fff8 	bl	d4cf8 <_ZN5Print5printEc>
  n += print('\n');
   d4d08:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4d0a:	4604      	mov	r4, r0
  n += print('\n');
   d4d0c:	4628      	mov	r0, r5
   d4d0e:	f7ff fff3 	bl	d4cf8 <_ZN5Print5printEc>
  return n;
}
   d4d12:	4420      	add	r0, r4
   d4d14:	bd38      	pop	{r3, r4, r5, pc}

000d4d16 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d16:	b538      	push	{r3, r4, r5, lr}
   d4d18:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4d1a:	f7ff ffdd 	bl	d4cd8 <_ZN5Print5writeEPKc>
   d4d1e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4d20:	4628      	mov	r0, r5
   d4d22:	f7ff ffec 	bl	d4cfe <_ZN5Print7printlnEv>
  return n;
}
   d4d26:	4420      	add	r0, r4
   d4d28:	bd38      	pop	{r3, r4, r5, pc}

000d4d2a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d2a:	b530      	push	{r4, r5, lr}
   d4d2c:	b08b      	sub	sp, #44	; 0x2c
   d4d2e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d30:	2100      	movs	r1, #0
   d4d32:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d36:	2a01      	cmp	r2, #1
   d4d38:	bf98      	it	ls
   d4d3a:	220a      	movls	r2, #10
   d4d3c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4d40:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4d44:	fb05 3312 	mls	r3, r5, r2, r3
   d4d48:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d4c:	2b09      	cmp	r3, #9
   d4d4e:	bf94      	ite	ls
   d4d50:	3330      	addls	r3, #48	; 0x30
   d4d52:	3337      	addhi	r3, #55	; 0x37
   d4d54:	b2db      	uxtb	r3, r3
   d4d56:	4621      	mov	r1, r4
   d4d58:	f804 3901 	strb.w	r3, [r4], #-1
   d4d5c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4d5e:	2d00      	cmp	r5, #0
   d4d60:	d1ee      	bne.n	d4d40 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4d62:	f7ff ffb9 	bl	d4cd8 <_ZN5Print5writeEPKc>
}
   d4d66:	b00b      	add	sp, #44	; 0x2c
   d4d68:	bd30      	pop	{r4, r5, pc}
	...

000d4d6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d6c:	4b01      	ldr	r3, [pc, #4]	; (d4d74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d6e:	4a02      	ldr	r2, [pc, #8]	; (d4d78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d70:	601a      	str	r2, [r3, #0]
   d4d72:	4770      	bx	lr
   d4d74:	2003e410 	.word	0x2003e410
   d4d78:	000d6287 	.word	0x000d6287

000d4d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4d7c:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4d7e:	681a      	ldr	r2, [r3, #0]
   d4d80:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4d82:	601a      	str	r2, [r3, #0]
   d4d84:	4770      	bx	lr
   d4d86:	bf00      	nop
   d4d88:	2003e274 	.word	0x2003e274
   d4d8c:	2003e414 	.word	0x2003e414

000d4d90 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4d90:	2100      	movs	r1, #0
   d4d92:	f7ff be3b 	b.w	d4a0c <system_delay_ms>

000d4d96 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d96:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4d98:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4d9a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4d9c:	b113      	cbz	r3, d4da4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4d9e:	2203      	movs	r2, #3
   d4da0:	4601      	mov	r1, r0
   d4da2:	4798      	blx	r3
    }
   d4da4:	4620      	mov	r0, r4
   d4da6:	bd10      	pop	{r4, pc}

000d4da8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4da8:	b510      	push	{r4, lr}
   d4daa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dac:	f7ff fff3 	bl	d4d96 <_ZNSt14_Function_baseD1Ev>
   d4db0:	4620      	mov	r0, r4
   d4db2:	bd10      	pop	{r4, pc}

000d4db4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4db4:	4803      	ldr	r0, [pc, #12]	; (d4dc4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4db6:	4a04      	ldr	r2, [pc, #16]	; (d4dc8 <_GLOBAL__sub_I_RGB+0x14>)
   d4db8:	4904      	ldr	r1, [pc, #16]	; (d4dcc <_GLOBAL__sub_I_RGB+0x18>)
   d4dba:	2300      	movs	r3, #0
   d4dbc:	6083      	str	r3, [r0, #8]
   d4dbe:	f000 be95 	b.w	d5aec <__aeabi_atexit>
   d4dc2:	bf00      	nop
   d4dc4:	2003e418 	.word	0x2003e418
   d4dc8:	2003e2dc 	.word	0x2003e2dc
   d4dcc:	000d4da9 	.word	0x000d4da9

000d4dd0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4dd0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4dd2:	4b0c      	ldr	r3, [pc, #48]	; (d4e04 <serialEventRun+0x34>)
   d4dd4:	b133      	cbz	r3, d4de4 <serialEventRun+0x14>
   d4dd6:	f000 f969 	bl	d50ac <_Z16_fetch_usbserialv>
   d4dda:	6803      	ldr	r3, [r0, #0]
   d4ddc:	691b      	ldr	r3, [r3, #16]
   d4dde:	4798      	blx	r3
   d4de0:	2800      	cmp	r0, #0
   d4de2:	dc09      	bgt.n	d4df8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4de4:	4b08      	ldr	r3, [pc, #32]	; (d4e08 <serialEventRun+0x38>)
   d4de6:	b163      	cbz	r3, d4e02 <serialEventRun+0x32>
   d4de8:	f000 f9de 	bl	d51a8 <_Z22__fetch_global_Serial1v>
   d4dec:	6803      	ldr	r3, [r0, #0]
   d4dee:	691b      	ldr	r3, [r3, #16]
   d4df0:	4798      	blx	r3
   d4df2:	2800      	cmp	r0, #0
   d4df4:	dc03      	bgt.n	d4dfe <serialEventRun+0x2e>
   d4df6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4df8:	f3af 8000 	nop.w
   d4dfc:	e7f2      	b.n	d4de4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4dfe:	f3af 8000 	nop.w
   d4e02:	bd08      	pop	{r3, pc}
	...

000d4e0c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4e0c:	b508      	push	{r3, lr}
	serialEventRun();
   d4e0e:	f7ff ffdf 	bl	d4dd0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4e12:	f7ff fd03 	bl	d481c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4e16:	4b01      	ldr	r3, [pc, #4]	; (d4e1c <_post_loop+0x10>)
   d4e18:	6018      	str	r0, [r3, #0]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	2003e74c 	.word	0x2003e74c

000d4e20 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4e20:	4802      	ldr	r0, [pc, #8]	; (d4e2c <_Z33system_initialize_user_backup_ramv+0xc>)
   d4e22:	4a03      	ldr	r2, [pc, #12]	; (d4e30 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4e24:	4903      	ldr	r1, [pc, #12]	; (d4e34 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4e26:	1a12      	subs	r2, r2, r0
   d4e28:	f000 bfd2 	b.w	d5dd0 <memcpy>
   d4e2c:	2003f400 	.word	0x2003f400
   d4e30:	2003f404 	.word	0x2003f404
   d4e34:	000d6550 	.word	0x000d6550

000d4e38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4e38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e3a:	2300      	movs	r3, #0
   d4e3c:	9300      	str	r3, [sp, #0]
   d4e3e:	461a      	mov	r2, r3
   d4e40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e44:	f7ff fdf4 	bl	d4a30 <system_ctrl_set_result>
}
   d4e48:	b003      	add	sp, #12
   d4e4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4e50 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4e50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4e52:	8843      	ldrh	r3, [r0, #2]
   d4e54:	2b0a      	cmp	r3, #10
   d4e56:	d008      	beq.n	d4e6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4e58:	2b50      	cmp	r3, #80	; 0x50
   d4e5a:	d109      	bne.n	d4e70 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4e5c:	4b09      	ldr	r3, [pc, #36]	; (d4e84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4e5e:	681b      	ldr	r3, [r3, #0]
   d4e60:	b13b      	cbz	r3, d4e72 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4e62:	b003      	add	sp, #12
   d4e64:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4e68:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4e6a:	f7ff ffe5 	bl	d4e38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4e6e:	e006      	b.n	d4e7e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4e70:	2300      	movs	r3, #0
   d4e72:	9300      	str	r3, [sp, #0]
   d4e74:	461a      	mov	r2, r3
   d4e76:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4e7a:	f7ff fdd9 	bl	d4a30 <system_ctrl_set_result>
        break;
    }
}
   d4e7e:	b003      	add	sp, #12
   d4e80:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e84:	2003e428 	.word	0x2003e428

000d4e88 <module_user_init_hook>:

void module_user_init_hook()
{
   d4e88:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4e8a:	4c10      	ldr	r4, [pc, #64]	; (d4ecc <module_user_init_hook+0x44>)
   d4e8c:	4d10      	ldr	r5, [pc, #64]	; (d4ed0 <module_user_init_hook+0x48>)
   d4e8e:	6823      	ldr	r3, [r4, #0]
   d4e90:	42ab      	cmp	r3, r5
   d4e92:	4b10      	ldr	r3, [pc, #64]	; (d4ed4 <module_user_init_hook+0x4c>)
   d4e94:	bf0c      	ite	eq
   d4e96:	2201      	moveq	r2, #1
   d4e98:	2200      	movne	r2, #0
   d4e9a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4e9c:	d002      	beq.n	d4ea4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4e9e:	f7ff ffbf 	bl	d4e20 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4ea2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4ea4:	f7ff fcaa 	bl	d47fc <HAL_RNG_GetRandomNumber>
   d4ea8:	4604      	mov	r4, r0
    srand(seed);
   d4eaa:	f000 ffbf 	bl	d5e2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4eae:	4b0a      	ldr	r3, [pc, #40]	; (d4ed8 <module_user_init_hook+0x50>)
   d4eb0:	b113      	cbz	r3, d4eb8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4eb2:	4620      	mov	r0, r4
   d4eb4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4eb8:	2100      	movs	r1, #0
   d4eba:	4807      	ldr	r0, [pc, #28]	; (d4ed8 <module_user_init_hook+0x50>)
   d4ebc:	f7ff fe12 	bl	d4ae4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ec0:	2100      	movs	r1, #0
   d4ec2:	4806      	ldr	r0, [pc, #24]	; (d4edc <module_user_init_hook+0x54>)
}
   d4ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ec8:	f7ff bda8 	b.w	d4a1c <system_ctrl_set_app_request_handler>
   d4ecc:	2003f400 	.word	0x2003f400
   d4ed0:	9a271c1e 	.word	0x9a271c1e
   d4ed4:	2003e42c 	.word	0x2003e42c
   d4ed8:	00000000 	.word	0x00000000
   d4edc:	000d4e51 	.word	0x000d4e51

000d4ee0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4ee0:	4770      	bx	lr

000d4ee2 <_ZN9IPAddressD0Ev>:
   d4ee2:	b510      	push	{r4, lr}
   d4ee4:	2118      	movs	r1, #24
   d4ee6:	4604      	mov	r4, r0
   d4ee8:	f000 fe05 	bl	d5af6 <_ZdlPvj>
   d4eec:	4620      	mov	r0, r4
   d4eee:	bd10      	pop	{r4, pc}

000d4ef0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4ef2:	7d03      	ldrb	r3, [r0, #20]
   d4ef4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ef6:	b08d      	sub	sp, #52	; 0x34
   d4ef8:	460e      	mov	r6, r1
   d4efa:	f100 0704 	add.w	r7, r0, #4
   d4efe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f02:	d002      	beq.n	d4f0a <_ZNK9IPAddress7printToER5Print+0x1a>
   d4f04:	f100 0508 	add.w	r5, r0, #8
   d4f08:	e018      	b.n	d4f3c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f0a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f0c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4f0e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4f12:	232f      	movs	r3, #47	; 0x2f
   d4f14:	462a      	mov	r2, r5
   d4f16:	200a      	movs	r0, #10
   d4f18:	f7ff fcb0 	bl	d487c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4f1c:	4628      	mov	r0, r5
   d4f1e:	f000 ffef 	bl	d5f00 <strlen>
   d4f22:	6833      	ldr	r3, [r6, #0]
   d4f24:	4602      	mov	r2, r0
   d4f26:	68db      	ldr	r3, [r3, #12]
   d4f28:	4629      	mov	r1, r5
   d4f2a:	4630      	mov	r0, r6
   d4f2c:	4798      	blx	r3
   d4f2e:	e00f      	b.n	d4f50 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4f30:	b124      	cbz	r4, d4f3c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4f32:	212e      	movs	r1, #46	; 0x2e
   d4f34:	4630      	mov	r0, r6
   d4f36:	f7ff fedf 	bl	d4cf8 <_ZN5Print5printEc>
   d4f3a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4f3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4f40:	220a      	movs	r2, #10
   d4f42:	4630      	mov	r0, r6
   d4f44:	f7ff fef1 	bl	d4d2a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f48:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f4a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4f4c:	d1f0      	bne.n	d4f30 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4f4e:	4620      	mov	r0, r4
    }
    return n;
}
   d4f50:	b00d      	add	sp, #52	; 0x34
   d4f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4f54 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4f54:	b510      	push	{r4, lr}
   d4f56:	4b05      	ldr	r3, [pc, #20]	; (d4f6c <_ZN9IPAddressC1Ev+0x18>)
   d4f58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4f5a:	2211      	movs	r2, #17
   d4f5c:	f840 3b04 	str.w	r3, [r0], #4
   d4f60:	2100      	movs	r1, #0
   d4f62:	f000 ff5b 	bl	d5e1c <memset>
{
    clear();
}
   d4f66:	4620      	mov	r0, r4
   d4f68:	bd10      	pop	{r4, pc}
   d4f6a:	bf00      	nop
   d4f6c:	000d6318 	.word	0x000d6318

000d4f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4f70:	4603      	mov	r3, r0
   d4f72:	4a07      	ldr	r2, [pc, #28]	; (d4f90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4f74:	b510      	push	{r4, lr}
   d4f76:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4f7a:	f101 0210 	add.w	r2, r1, #16
   d4f7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4f82:	f843 4b04 	str.w	r4, [r3], #4
   d4f86:	4291      	cmp	r1, r2
   d4f88:	d1f9      	bne.n	d4f7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4f8a:	780a      	ldrb	r2, [r1, #0]
   d4f8c:	701a      	strb	r2, [r3, #0]
}
   d4f8e:	bd10      	pop	{r4, pc}
   d4f90:	000d6318 	.word	0x000d6318

000d4f94 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d4f94:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d4f96:	2b04      	cmp	r3, #4
   d4f98:	d101      	bne.n	d4f9e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d4f9a:	6840      	ldr	r0, [r0, #4]
   d4f9c:	e008      	b.n	d4fb0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d4f9e:	2b06      	cmp	r3, #6
   d4fa0:	d10a      	bne.n	d4fb8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4fa2:	6843      	ldr	r3, [r0, #4]
   d4fa4:	b953      	cbnz	r3, d4fbc <_ZNK9IPAddresscvbEv+0x28>
   d4fa6:	6883      	ldr	r3, [r0, #8]
   d4fa8:	b943      	cbnz	r3, d4fbc <_ZNK9IPAddresscvbEv+0x28>
   d4faa:	68c3      	ldr	r3, [r0, #12]
   d4fac:	b933      	cbnz	r3, d4fbc <_ZNK9IPAddresscvbEv+0x28>
   d4fae:	6900      	ldr	r0, [r0, #16]
   d4fb0:	3000      	adds	r0, #0
   d4fb2:	bf18      	it	ne
   d4fb4:	2001      	movne	r0, #1
   d4fb6:	4770      	bx	lr
    } else {
        return false;
   d4fb8:	2000      	movs	r0, #0
   d4fba:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4fbc:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d4fbe:	4770      	bx	lr

000d4fc0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4fc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4fc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4fc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4fca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4fce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4fd2:	2304      	movs	r3, #4
   d4fd4:	6041      	str	r1, [r0, #4]
   d4fd6:	7503      	strb	r3, [r0, #20]
   d4fd8:	bd10      	pop	{r4, pc}

000d4fda <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4fda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4fdc:	780d      	ldrb	r5, [r1, #0]
   d4fde:	788b      	ldrb	r3, [r1, #2]
   d4fe0:	784a      	ldrb	r2, [r1, #1]
   d4fe2:	78c9      	ldrb	r1, [r1, #3]
   d4fe4:	9100      	str	r1, [sp, #0]
   d4fe6:	4629      	mov	r1, r5
   d4fe8:	f7ff ffea 	bl	d4fc0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4fec:	b003      	add	sp, #12
   d4fee:	bd30      	pop	{r4, r5, pc}

000d4ff0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4ff0:	7441      	strb	r1, [r0, #17]
   d4ff2:	4770      	bx	lr

000d4ff4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ff4:	4770      	bx	lr

000d4ff6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4ff6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ff8:	2100      	movs	r1, #0
   d4ffa:	7c00      	ldrb	r0, [r0, #16]
   d4ffc:	f7ff fcd6 	bl	d49ac <HAL_USB_USART_Receive_Data>
}
   d5000:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5004:	bf28      	it	cs
   d5006:	f04f 30ff 	movcs.w	r0, #4294967295
   d500a:	bd08      	pop	{r3, pc}

000d500c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d500c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d500e:	2101      	movs	r1, #1
   d5010:	7c00      	ldrb	r0, [r0, #16]
   d5012:	f7ff fccb 	bl	d49ac <HAL_USB_USART_Receive_Data>
}
   d5016:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d501a:	bf28      	it	cs
   d501c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5020:	bd08      	pop	{r3, pc}

000d5022 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5022:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5024:	7c00      	ldrb	r0, [r0, #16]
   d5026:	f7ff fcb9 	bl	d499c <HAL_USB_USART_Available_Data_For_Write>
}
   d502a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d502e:	bd08      	pop	{r3, pc}

000d5030 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5030:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5032:	7c00      	ldrb	r0, [r0, #16]
   d5034:	f7ff fcaa 	bl	d498c <HAL_USB_USART_Available_Data>
}
   d5038:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d503c:	bd08      	pop	{r3, pc}

000d503e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d503e:	7c00      	ldrb	r0, [r0, #16]
   d5040:	f7ff bcc4 	b.w	d49cc <HAL_USB_USART_Flush_Data>

000d5044 <_ZN9USBSerialD0Ev>:
   d5044:	b510      	push	{r4, lr}
   d5046:	2114      	movs	r1, #20
   d5048:	4604      	mov	r4, r0
   d504a:	f000 fd54 	bl	d5af6 <_ZdlPvj>
   d504e:	4620      	mov	r0, r4
   d5050:	bd10      	pop	{r4, pc}

000d5052 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5052:	b538      	push	{r3, r4, r5, lr}
   d5054:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5056:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5058:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d505a:	f7ff fc9f 	bl	d499c <HAL_USB_USART_Available_Data_For_Write>
   d505e:	2800      	cmp	r0, #0
   d5060:	dc01      	bgt.n	d5066 <_ZN9USBSerial5writeEh+0x14>
   d5062:	7c60      	ldrb	r0, [r4, #17]
   d5064:	b128      	cbz	r0, d5072 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5066:	4629      	mov	r1, r5
   d5068:	7c20      	ldrb	r0, [r4, #16]
   d506a:	f7ff fca7 	bl	d49bc <HAL_USB_USART_Send_Data>
   d506e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5072:	bd38      	pop	{r3, r4, r5, pc}

000d5074 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5074:	b510      	push	{r4, lr}
   d5076:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5078:	2300      	movs	r3, #0
   d507a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d507c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5080:	60a3      	str	r3, [r4, #8]
   d5082:	4b05      	ldr	r3, [pc, #20]	; (d5098 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5084:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5086:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5088:	4608      	mov	r0, r1
{
  _serial = serial;
   d508a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d508c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d508e:	4611      	mov	r1, r2
   d5090:	f7ff fc74 	bl	d497c <HAL_USB_USART_Init>
}
   d5094:	4620      	mov	r0, r4
   d5096:	bd10      	pop	{r4, pc}
   d5098:	000d632c 	.word	0x000d632c

000d509c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d509c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d509e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d50a0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d50a2:	2100      	movs	r1, #0
   d50a4:	f000 feba 	bl	d5e1c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d50a8:	4620      	mov	r0, r4
   d50aa:	bd10      	pop	{r4, pc}

000d50ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d50ac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50ae:	4d0e      	ldr	r5, [pc, #56]	; (d50e8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d50b0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d50b2:	a801      	add	r0, sp, #4
   d50b4:	f7ff fff2 	bl	d509c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d50b8:	6829      	ldr	r1, [r5, #0]
   d50ba:	f011 0401 	ands.w	r4, r1, #1
   d50be:	d110      	bne.n	d50e2 <_Z16_fetch_usbserialv+0x36>
   d50c0:	4628      	mov	r0, r5
   d50c2:	f7fe fff9 	bl	d40b8 <__cxa_guard_acquire>
   d50c6:	b160      	cbz	r0, d50e2 <_Z16_fetch_usbserialv+0x36>
   d50c8:	aa01      	add	r2, sp, #4
   d50ca:	4621      	mov	r1, r4
   d50cc:	4807      	ldr	r0, [pc, #28]	; (d50ec <_Z16_fetch_usbserialv+0x40>)
   d50ce:	f7ff ffd1 	bl	d5074 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d50d2:	4628      	mov	r0, r5
   d50d4:	f7fe fff5 	bl	d40c2 <__cxa_guard_release>
   d50d8:	4a05      	ldr	r2, [pc, #20]	; (d50f0 <_Z16_fetch_usbserialv+0x44>)
   d50da:	4906      	ldr	r1, [pc, #24]	; (d50f4 <_Z16_fetch_usbserialv+0x48>)
   d50dc:	4803      	ldr	r0, [pc, #12]	; (d50ec <_Z16_fetch_usbserialv+0x40>)
   d50de:	f000 fd05 	bl	d5aec <__aeabi_atexit>
	return _usbserial;
}
   d50e2:	4802      	ldr	r0, [pc, #8]	; (d50ec <_Z16_fetch_usbserialv+0x40>)
   d50e4:	b007      	add	sp, #28
   d50e6:	bd30      	pop	{r4, r5, pc}
   d50e8:	2003e430 	.word	0x2003e430
   d50ec:	2003e434 	.word	0x2003e434
   d50f0:	2003e2dc 	.word	0x2003e2dc
   d50f4:	000d4ff5 	.word	0x000d4ff5

000d50f8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d50f8:	4770      	bx	lr

000d50fa <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d50fa:	7441      	strb	r1, [r0, #17]
   d50fc:	4770      	bx	lr

000d50fe <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d50fe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5100:	7c00      	ldrb	r0, [r0, #16]
   d5102:	f7ff fc03 	bl	d490c <HAL_USART_Available_Data_For_Write>
}
   d5106:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d510a:	bd08      	pop	{r3, pc}

000d510c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d510c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d510e:	7c00      	ldrb	r0, [r0, #16]
   d5110:	f7ff fbdc 	bl	d48cc <HAL_USART_Available_Data>
}
   d5114:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5118:	bd08      	pop	{r3, pc}

000d511a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d511a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d511c:	7c00      	ldrb	r0, [r0, #16]
   d511e:	f7ff fbe5 	bl	d48ec <HAL_USART_Peek_Data>
}
   d5122:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5126:	bf28      	it	cs
   d5128:	f04f 30ff 	movcs.w	r0, #4294967295
   d512c:	bd08      	pop	{r3, pc}

000d512e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d512e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5130:	7c00      	ldrb	r0, [r0, #16]
   d5132:	f7ff fbd3 	bl	d48dc <HAL_USART_Read_Data>
}
   d5136:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d513a:	bf28      	it	cs
   d513c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5140:	bd08      	pop	{r3, pc}

000d5142 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5142:	7c00      	ldrb	r0, [r0, #16]
   d5144:	f7ff bbda 	b.w	d48fc <HAL_USART_Flush_Data>

000d5148 <_ZN11USARTSerialD0Ev>:
   d5148:	b510      	push	{r4, lr}
   d514a:	2114      	movs	r1, #20
   d514c:	4604      	mov	r4, r0
   d514e:	f000 fcd2 	bl	d5af6 <_ZdlPvj>
   d5152:	4620      	mov	r0, r4
   d5154:	bd10      	pop	{r4, pc}

000d5156 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5156:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5158:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d515a:	4604      	mov	r4, r0
   d515c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d515e:	b925      	cbnz	r5, d516a <_ZN11USARTSerial5writeEh+0x14>
   d5160:	7c00      	ldrb	r0, [r0, #16]
   d5162:	f7ff fbd3 	bl	d490c <HAL_USART_Available_Data_For_Write>
   d5166:	2800      	cmp	r0, #0
   d5168:	dd05      	ble.n	d5176 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d516a:	4631      	mov	r1, r6
   d516c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d516e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5172:	f7ff bba3 	b.w	d48bc <HAL_USART_Write_Data>
  }
  return 0;
}
   d5176:	4628      	mov	r0, r5
   d5178:	bd70      	pop	{r4, r5, r6, pc}
	...

000d517c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d517c:	b510      	push	{r4, lr}
   d517e:	4604      	mov	r4, r0
   d5180:	4608      	mov	r0, r1
   d5182:	4611      	mov	r1, r2
   d5184:	2200      	movs	r2, #0
   d5186:	6062      	str	r2, [r4, #4]
   d5188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d518c:	60a2      	str	r2, [r4, #8]
   d518e:	4a05      	ldr	r2, [pc, #20]	; (d51a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5190:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5192:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5194:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5196:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5198:	461a      	mov	r2, r3
   d519a:	f7ff fb87 	bl	d48ac <HAL_USART_Init>
}
   d519e:	4620      	mov	r0, r4
   d51a0:	bd10      	pop	{r4, pc}
   d51a2:	bf00      	nop
   d51a4:	000d635c 	.word	0x000d635c

000d51a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d51a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d51aa:	4d0c      	ldr	r5, [pc, #48]	; (d51dc <_Z22__fetch_global_Serial1v+0x34>)
   d51ac:	6829      	ldr	r1, [r5, #0]
   d51ae:	f011 0401 	ands.w	r4, r1, #1
   d51b2:	d111      	bne.n	d51d8 <_Z22__fetch_global_Serial1v+0x30>
   d51b4:	4628      	mov	r0, r5
   d51b6:	f7fe ff7f 	bl	d40b8 <__cxa_guard_acquire>
   d51ba:	b168      	cbz	r0, d51d8 <_Z22__fetch_global_Serial1v+0x30>
   d51bc:	4a08      	ldr	r2, [pc, #32]	; (d51e0 <_Z22__fetch_global_Serial1v+0x38>)
   d51be:	4b09      	ldr	r3, [pc, #36]	; (d51e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d51c0:	4809      	ldr	r0, [pc, #36]	; (d51e8 <_Z22__fetch_global_Serial1v+0x40>)
   d51c2:	4621      	mov	r1, r4
   d51c4:	f7ff ffda 	bl	d517c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d51c8:	4628      	mov	r0, r5
   d51ca:	f7fe ff7a 	bl	d40c2 <__cxa_guard_release>
   d51ce:	4a07      	ldr	r2, [pc, #28]	; (d51ec <_Z22__fetch_global_Serial1v+0x44>)
   d51d0:	4907      	ldr	r1, [pc, #28]	; (d51f0 <_Z22__fetch_global_Serial1v+0x48>)
   d51d2:	4805      	ldr	r0, [pc, #20]	; (d51e8 <_Z22__fetch_global_Serial1v+0x40>)
   d51d4:	f000 fc8a 	bl	d5aec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d51d8:	4803      	ldr	r0, [pc, #12]	; (d51e8 <_Z22__fetch_global_Serial1v+0x40>)
   d51da:	bd38      	pop	{r3, r4, r5, pc}
   d51dc:	2003e4e0 	.word	0x2003e4e0
   d51e0:	2003e4e4 	.word	0x2003e4e4
   d51e4:	2003e45c 	.word	0x2003e45c
   d51e8:	2003e448 	.word	0x2003e448
   d51ec:	2003e2dc 	.word	0x2003e2dc
   d51f0:	000d50f9 	.word	0x000d50f9

000d51f4 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d51f4:	b510      	push	{r4, lr}
  if (0 == max) {
   d51f6:	4604      	mov	r4, r0
   d51f8:	b130      	cbz	r0, d5208 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d51fa:	f000 fe3f 	bl	d5e7c <rand>
   d51fe:	fb90 f3f4 	sdiv	r3, r0, r4
   d5202:	fb03 0014 	mls	r0, r3, r4, r0
   d5206:	bd10      	pop	{r4, pc}
}
   d5208:	bd10      	pop	{r4, pc}

000d520a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d520a:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d520c:	b510      	push	{r4, lr}
   d520e:	4604      	mov	r4, r0
  if (min >= max) {
   d5210:	da04      	bge.n	d521c <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d5212:	1a08      	subs	r0, r1, r0
   d5214:	f7ff ffee 	bl	d51f4 <_Z6randomi>
   d5218:	4420      	add	r0, r4
   d521a:	bd10      	pop	{r4, pc}
}
   d521c:	bd10      	pop	{r4, pc}

000d521e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d521e:	2200      	movs	r2, #0
   d5220:	4611      	mov	r1, r2
   d5222:	6840      	ldr	r0, [r0, #4]
   d5224:	f7ff bc46 	b.w	d4ab4 <network_listening>

000d5228 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5228:	2200      	movs	r2, #0
   d522a:	4611      	mov	r1, r2
   d522c:	6840      	ldr	r0, [r0, #4]
   d522e:	f7ff bc51 	b.w	d4ad4 <network_get_listen_timeout>

000d5232 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5232:	2200      	movs	r2, #0
   d5234:	6840      	ldr	r0, [r0, #4]
   d5236:	f7ff bc45 	b.w	d4ac4 <network_set_listen_timeout>

000d523a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d523a:	2200      	movs	r2, #0
   d523c:	f081 0101 	eor.w	r1, r1, #1
   d5240:	6840      	ldr	r0, [r0, #4]
   d5242:	f7ff bc2f 	b.w	d4aa4 <network_listen>

000d5246 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5246:	2300      	movs	r3, #0
   d5248:	461a      	mov	r2, r3
   d524a:	2101      	movs	r1, #1
   d524c:	6840      	ldr	r0, [r0, #4]
   d524e:	f7ff bc21 	b.w	d4a94 <network_off>

000d5252 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5252:	2300      	movs	r3, #0
   d5254:	461a      	mov	r2, r3
   d5256:	4619      	mov	r1, r3
   d5258:	6840      	ldr	r0, [r0, #4]
   d525a:	f7ff bc13 	b.w	d4a84 <network_on>

000d525e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d525e:	2200      	movs	r2, #0
   d5260:	4611      	mov	r1, r2
   d5262:	6840      	ldr	r0, [r0, #4]
   d5264:	f7ff bc06 	b.w	d4a74 <network_ready>

000d5268 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5268:	2200      	movs	r2, #0
   d526a:	4611      	mov	r1, r2
   d526c:	6840      	ldr	r0, [r0, #4]
   d526e:	f7ff bbf1 	b.w	d4a54 <network_connecting>

000d5272 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5272:	2200      	movs	r2, #0
   d5274:	2102      	movs	r1, #2
   d5276:	6840      	ldr	r0, [r0, #4]
   d5278:	f7ff bbf4 	b.w	d4a64 <network_disconnect>

000d527c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d527c:	2300      	movs	r3, #0
   d527e:	461a      	mov	r2, r3
   d5280:	6840      	ldr	r0, [r0, #4]
   d5282:	f7ff bbdf 	b.w	d4a44 <network_connect>

000d5286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5286:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5288:	4605      	mov	r5, r0
   d528a:	b188      	cbz	r0, d52b0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d528c:	6804      	ldr	r4, [r0, #0]
   d528e:	b14c      	cbz	r4, d52a4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5290:	68a3      	ldr	r3, [r4, #8]
   d5292:	b11b      	cbz	r3, d529c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5294:	2203      	movs	r2, #3
   d5296:	4621      	mov	r1, r4
   d5298:	4620      	mov	r0, r4
   d529a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d529c:	2110      	movs	r1, #16
   d529e:	4620      	mov	r0, r4
   d52a0:	f000 fc29 	bl	d5af6 <_ZdlPvj>
   d52a4:	4628      	mov	r0, r5
   d52a6:	2114      	movs	r1, #20
      }
   d52a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52ac:	f000 bc23 	b.w	d5af6 <_ZdlPvj>
   d52b0:	bd38      	pop	{r3, r4, r5, pc}

000d52b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d52b2:	b110      	cbz	r0, d52ba <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d52b4:	6803      	ldr	r3, [r0, #0]
   d52b6:	685b      	ldr	r3, [r3, #4]
   d52b8:	4718      	bx	r3
   d52ba:	4770      	bx	lr

000d52bc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d52bc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52be:	6803      	ldr	r3, [r0, #0]
   d52c0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d52c2:	b1bb      	cbz	r3, d52f4 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d52c4:	6858      	ldr	r0, [r3, #4]
   d52c6:	f7ff fab1 	bl	d482c <os_thread_is_current>
   d52ca:	b978      	cbnz	r0, d52ec <_ZN6ThreadD1Ev+0x30>
   d52cc:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d52ce:	7c5a      	ldrb	r2, [r3, #17]
   d52d0:	b912      	cbnz	r2, d52d8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d52d2:	6858      	ldr	r0, [r3, #4]
   d52d4:	f7ff fab2 	bl	d483c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d52d8:	6823      	ldr	r3, [r4, #0]
   d52da:	6858      	ldr	r0, [r3, #4]
   d52dc:	f7ff fab6 	bl	d484c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52e0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d52e2:	2300      	movs	r3, #0
   d52e4:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d52e6:	b128      	cbz	r0, d52f4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d52e8:	f7ff ffcd 	bl	d5286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52ec:	6820      	ldr	r0, [r4, #0]
   d52ee:	b108      	cbz	r0, d52f4 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d52f0:	f7ff ffc9 	bl	d5286 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d52f4:	4620      	mov	r0, r4
   d52f6:	bd10      	pop	{r4, pc}

000d52f8 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d52f8:	b538      	push	{r3, r4, r5, lr}
   d52fa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52fc:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5300:	b108      	cbz	r0, d5306 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5302:	f7fe fecc 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5306:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d530a:	b108      	cbz	r0, d5310 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d530c:	f7ff faae 	bl	d486c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5310:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5314:	b135      	cbz	r5, d5324 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5316:	4628      	mov	r0, r5
   d5318:	f7ff ffd0 	bl	d52bc <_ZN6ThreadD1Ev>
   d531c:	2104      	movs	r1, #4
   d531e:	4628      	mov	r0, r5
   d5320:	f000 fbe9 	bl	d5af6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5324:	6820      	ldr	r0, [r4, #0]
   d5326:	b108      	cbz	r0, d532c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5328:	f7ff ffc3 	bl	d52b2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d532c:	4620      	mov	r0, r4
   d532e:	bd38      	pop	{r3, r4, r5, pc}

000d5330 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5330:	b510      	push	{r4, lr}
   d5332:	4b04      	ldr	r3, [pc, #16]	; (d5344 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5334:	4604      	mov	r4, r0
   d5336:	f840 3b08 	str.w	r3, [r0], #8
   d533a:	f7ff ffdd 	bl	d52f8 <_ZN5spark11MeshPublishD1Ev>
   d533e:	4620      	mov	r0, r4
   d5340:	bd10      	pop	{r4, pc}
   d5342:	bf00      	nop
   d5344:	000d638c 	.word	0x000d638c

000d5348 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5348:	b538      	push	{r3, r4, r5, lr}
   d534a:	4c0e      	ldr	r4, [pc, #56]	; (d5384 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d534c:	4b0e      	ldr	r3, [pc, #56]	; (d5388 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d534e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5350:	2500      	movs	r5, #0
   d5352:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5354:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5358:	6063      	str	r3, [r4, #4]
   d535a:	60a5      	str	r5, [r4, #8]
   d535c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5360:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5364:	f7ff fa7a 	bl	d485c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5368:	4b08      	ldr	r3, [pc, #32]	; (d538c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d536a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d536e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5372:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5374:	4620      	mov	r0, r4
   d5376:	4a06      	ldr	r2, [pc, #24]	; (d5390 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5378:	4906      	ldr	r1, [pc, #24]	; (d5394 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d537a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d537e:	f000 bbb5 	b.w	d5aec <__aeabi_atexit>
   d5382:	bf00      	nop
   d5384:	2003e568 	.word	0x2003e568
   d5388:	000d6474 	.word	0x000d6474
   d538c:	000d638c 	.word	0x000d638c
   d5390:	2003e2dc 	.word	0x2003e2dc
   d5394:	000d5331 	.word	0x000d5331

000d5398 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5398:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d539a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d539c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d539e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d53a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d53a4:	2201      	movs	r2, #1
   d53a6:	f04f 33ff 	mov.w	r3, #4294967295
   d53aa:	4621      	mov	r1, r4
   d53ac:	47a8      	blx	r5
}
   d53ae:	b003      	add	sp, #12
   d53b0:	bd30      	pop	{r4, r5, pc}

000d53b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d53b2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d53b4:	6803      	ldr	r3, [r0, #0]
   d53b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d53b8:	f04f 33ff 	mov.w	r3, #4294967295
   d53bc:	46a4      	mov	ip, r4
}
   d53be:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d53c2:	4760      	bx	ip

000d53c4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d53c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d53c6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d53c8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d53ca:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d53ce:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d53d0:	4621      	mov	r1, r4
   d53d2:	4613      	mov	r3, r2
   d53d4:	2201      	movs	r2, #1
   d53d6:	47a8      	blx	r5
}
   d53d8:	b003      	add	sp, #12
   d53da:	bd30      	pop	{r4, r5, pc}

000d53dc <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d53dc:	4770      	bx	lr

000d53de <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d53de:	b538      	push	{r3, r4, r5, lr}
   d53e0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d53e6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d53e8:	da05      	bge.n	d53f6 <_ZN9TCPClient9connectedEv+0x18>
   d53ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d53ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d53f2:	429a      	cmp	r2, r3
   d53f4:	d001      	beq.n	d53fa <_ZN9TCPClient9connectedEv+0x1c>
   d53f6:	2501      	movs	r5, #1
   d53f8:	e00b      	b.n	d5412 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d53fa:	6803      	ldr	r3, [r0, #0]
   d53fc:	691b      	ldr	r3, [r3, #16]
   d53fe:	4798      	blx	r3
   d5400:	2800      	cmp	r0, #0
   d5402:	bf14      	ite	ne
   d5404:	2501      	movne	r5, #1
   d5406:	2500      	moveq	r5, #0
        if (!rv) {
   d5408:	d103      	bne.n	d5412 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d540a:	6823      	ldr	r3, [r4, #0]
   d540c:	4620      	mov	r0, r4
   d540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5410:	4798      	blx	r3
        }
    }
    return rv;
}
   d5412:	4628      	mov	r0, r5
   d5414:	bd38      	pop	{r3, r4, r5, pc}

000d5416 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5416:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5418:	6818      	ldr	r0, [r3, #0]
}
   d541a:	43c0      	mvns	r0, r0
   d541c:	0fc0      	lsrs	r0, r0, #31
   d541e:	4770      	bx	lr

000d5420 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5420:	4770      	bx	lr

000d5422 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5422:	2000      	movs	r0, #0
   d5424:	4770      	bx	lr

000d5426 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5426:	b510      	push	{r4, lr}
   d5428:	2114      	movs	r1, #20
   d542a:	4604      	mov	r4, r0
   d542c:	f000 fb63 	bl	d5af6 <_ZdlPvj>
   d5430:	4620      	mov	r0, r4
   d5432:	bd10      	pop	{r4, pc}

000d5434 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5434:	f7fe be31 	b.w	d409a <_ZdlPv>

000d5438 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d543a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d543c:	2200      	movs	r2, #0
   d543e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5440:	9202      	str	r2, [sp, #8]
   d5442:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5444:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5446:	4604      	mov	r4, r0
   d5448:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d544a:	d008      	beq.n	d545e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d544c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5450:	fbb3 f1f2 	udiv	r1, r3, r2
   d5454:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5456:	fb02 3111 	mls	r1, r2, r1, r3
   d545a:	434a      	muls	r2, r1
   d545c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d545e:	6960      	ldr	r0, [r4, #20]
   d5460:	2308      	movs	r3, #8
   d5462:	9300      	str	r3, [sp, #0]
   d5464:	f241 0205 	movw	r2, #4101	; 0x1005
   d5468:	446b      	add	r3, sp
   d546a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d546e:	6800      	ldr	r0, [r0, #0]
   d5470:	f7ff fa54 	bl	d491c <sock_setsockopt>
    if (ret < 0) {
   d5474:	2800      	cmp	r0, #0
   d5476:	db08      	blt.n	d548a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d5478:	6960      	ldr	r0, [r4, #20]
   d547a:	2300      	movs	r3, #0
   d547c:	4632      	mov	r2, r6
   d547e:	4629      	mov	r1, r5
   d5480:	6800      	ldr	r0, [r0, #0]
   d5482:	f7ff fa6b 	bl	d495c <sock_send>
    if (ret < 0) {
   d5486:	2800      	cmp	r0, #0
   d5488:	da04      	bge.n	d5494 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d548a:	f7ff fb43 	bl	d4b14 <__errno>
   d548e:	6803      	ldr	r3, [r0, #0]
   d5490:	6063      	str	r3, [r4, #4]
   d5492:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5494:	b004      	add	sp, #16
   d5496:	bd70      	pop	{r4, r5, r6, pc}

000d5498 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5498:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d549a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d549c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d549e:	689b      	ldr	r3, [r3, #8]
   d54a0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d54a2:	68a3      	ldr	r3, [r4, #8]
   d54a4:	3b01      	subs	r3, #1
   d54a6:	60a3      	str	r3, [r4, #8]
   d54a8:	b92b      	cbnz	r3, d54b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d54aa:	6823      	ldr	r3, [r4, #0]
   d54ac:	4620      	mov	r0, r4
   d54ae:	68db      	ldr	r3, [r3, #12]
        }
    }
   d54b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d54b4:	4718      	bx	r3
   d54b6:	bd10      	pop	{r4, pc}

000d54b8 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d54b8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d54ba:	4604      	mov	r4, r0
   d54bc:	694d      	ldr	r5, [r1, #20]
   d54be:	4b05      	ldr	r3, [pc, #20]	; (d54d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d54c0:	f844 3b04 	str.w	r3, [r4], #4
   d54c4:	358c      	adds	r5, #140	; 0x8c
   d54c6:	4606      	mov	r6, r0
   d54c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d54ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d54cc:	682b      	ldr	r3, [r5, #0]
   d54ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d54d0:	4630      	mov	r0, r6
   d54d2:	bd70      	pop	{r4, r5, r6, pc}
   d54d4:	000d6318 	.word	0x000d6318

000d54d8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d54d8:	b510      	push	{r4, lr}
   d54da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d54dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d54e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d54e4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d54e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d54e8:	d005      	beq.n	d54f6 <_ZN9TCPClient4peekEv+0x1e>
   d54ea:	6962      	ldr	r2, [r4, #20]
   d54ec:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d54f0:	4413      	add	r3, r2
   d54f2:	7918      	ldrb	r0, [r3, #4]
   d54f4:	bd10      	pop	{r4, pc}
   d54f6:	6803      	ldr	r3, [r0, #0]
   d54f8:	691b      	ldr	r3, [r3, #16]
   d54fa:	4798      	blx	r3
   d54fc:	2800      	cmp	r0, #0
   d54fe:	d1f4      	bne.n	d54ea <_ZN9TCPClient4peekEv+0x12>
   d5500:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5504:	bd10      	pop	{r4, pc}

000d5506 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5506:	b510      	push	{r4, lr}
   d5508:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d550a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d550e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5512:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5514:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5516:	d008      	beq.n	d552a <_ZN9TCPClient4readEv+0x24>
   d5518:	6962      	ldr	r2, [r4, #20]
   d551a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d551e:	1c59      	adds	r1, r3, #1
   d5520:	4413      	add	r3, r2
   d5522:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5526:	7918      	ldrb	r0, [r3, #4]
   d5528:	bd10      	pop	{r4, pc}
   d552a:	6803      	ldr	r3, [r0, #0]
   d552c:	691b      	ldr	r3, [r3, #16]
   d552e:	4798      	blx	r3
   d5530:	2800      	cmp	r0, #0
   d5532:	d1f1      	bne.n	d5518 <_ZN9TCPClient4readEv+0x12>
   d5534:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5538:	bd10      	pop	{r4, pc}

000d553a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d553a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d553c:	6943      	ldr	r3, [r0, #20]
   d553e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5540:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5544:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5548:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d554a:	4605      	mov	r5, r0
   d554c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d554e:	d106      	bne.n	d555e <_ZN9TCPClient4readEPhj+0x24>
   d5550:	6803      	ldr	r3, [r0, #0]
   d5552:	691b      	ldr	r3, [r3, #16]
   d5554:	4798      	blx	r3
   d5556:	b910      	cbnz	r0, d555e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5558:	f04f 34ff 	mov.w	r4, #4294967295
   d555c:	e014      	b.n	d5588 <_ZN9TCPClient4readEPhj+0x4e>
   d555e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5560:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5564:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5568:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d556a:	42bc      	cmp	r4, r7
   d556c:	bf28      	it	cs
   d556e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5570:	4419      	add	r1, r3
   d5572:	4622      	mov	r2, r4
   d5574:	3104      	adds	r1, #4
   d5576:	4630      	mov	r0, r6
   d5578:	f000 fc2a 	bl	d5dd0 <memcpy>
   d557c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d557e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5582:	4423      	add	r3, r4
   d5584:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5588:	4620      	mov	r0, r4
   d558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d558c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d558c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5590:	4698      	mov	r8, r3
    stop();
   d5592:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5594:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5598:	460d      	mov	r5, r1
   d559a:	4606      	mov	r6, r0
   d559c:	4617      	mov	r7, r2
    stop();
   d559e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d55a0:	ab12      	add	r3, sp, #72	; 0x48
   d55a2:	2400      	movs	r4, #0
   d55a4:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d55a8:	4622      	mov	r2, r4
   d55aa:	4621      	mov	r1, r4
   d55ac:	4628      	mov	r0, r5
   d55ae:	f7ff f90d 	bl	d47cc <netdb_getaddrinfo>
   d55b2:	4681      	mov	r9, r0
   d55b4:	2800      	cmp	r0, #0
   d55b6:	d13d      	bne.n	d5634 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d55b8:	9b00      	ldr	r3, [sp, #0]
   d55ba:	2b00      	cmp	r3, #0
   d55bc:	d056      	beq.n	d566c <_ZN9TCPClient7connectEPKctm+0xe0>
   d55be:	695b      	ldr	r3, [r3, #20]
   d55c0:	2b00      	cmp	r3, #0
   d55c2:	d053      	beq.n	d566c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d55c4:	a806      	add	r0, sp, #24
   d55c6:	f7ff fcc5 	bl	d4f54 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d55ca:	9b00      	ldr	r3, [sp, #0]
   d55cc:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d55ce:	7863      	ldrb	r3, [r4, #1]
   d55d0:	2b02      	cmp	r3, #2
   d55d2:	d101      	bne.n	d55d8 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d55d4:	1d21      	adds	r1, r4, #4
   d55d6:	e013      	b.n	d5600 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d55d8:	2b0a      	cmp	r3, #10
   d55da:	d114      	bne.n	d5606 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d55dc:	2211      	movs	r2, #17
   d55de:	4649      	mov	r1, r9
   d55e0:	a801      	add	r0, sp, #4
   d55e2:	f000 fc1b 	bl	d5e1c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d55e6:	68a3      	ldr	r3, [r4, #8]
   d55e8:	bb33      	cbnz	r3, d5638 <_ZN9TCPClient7connectEPKctm+0xac>
   d55ea:	68e3      	ldr	r3, [r4, #12]
   d55ec:	bb23      	cbnz	r3, d5638 <_ZN9TCPClient7connectEPKctm+0xac>
   d55ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d55f2:	6925      	ldr	r5, [r4, #16]
   d55f4:	f7ff f94a 	bl	d488c <inet_htonl>
   d55f8:	4285      	cmp	r5, r0
   d55fa:	d11d      	bne.n	d5638 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d55fc:	f104 0114 	add.w	r1, r4, #20
   d5600:	a806      	add	r0, sp, #24
   d5602:	f7ff fcea 	bl	d4fda <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5606:	a806      	add	r0, sp, #24
   d5608:	f7ff fcc4 	bl	d4f94 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d560c:	2800      	cmp	r0, #0
   d560e:	d02d      	beq.n	d566c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d5610:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5612:	ad07      	add	r5, sp, #28
   d5614:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5618:	4b18      	ldr	r3, [pc, #96]	; (d567c <_ZN9TCPClient7connectEPKctm+0xf0>)
   d561a:	930c      	str	r3, [sp, #48]	; 0x30
   d561c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d561e:	ac0d      	add	r4, sp, #52	; 0x34
   d5620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5622:	682b      	ldr	r3, [r5, #0]
   d5624:	7023      	strb	r3, [r4, #0]
   d5626:	463a      	mov	r2, r7
   d5628:	4643      	mov	r3, r8
   d562a:	a90c      	add	r1, sp, #48	; 0x30
   d562c:	4630      	mov	r0, r6
   d562e:	47c8      	blx	r9
   d5630:	4681      	mov	r9, r0
   d5632:	e01b      	b.n	d566c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5634:	46a1      	mov	r9, r4
   d5636:	e019      	b.n	d566c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5638:	f104 0308 	add.w	r3, r4, #8
   d563c:	ad01      	add	r5, sp, #4
   d563e:	3418      	adds	r4, #24
   d5640:	6818      	ldr	r0, [r3, #0]
   d5642:	6859      	ldr	r1, [r3, #4]
   d5644:	462a      	mov	r2, r5
   d5646:	c203      	stmia	r2!, {r0, r1}
   d5648:	3308      	adds	r3, #8
   d564a:	42a3      	cmp	r3, r4
   d564c:	4615      	mov	r5, r2
   d564e:	d1f7      	bne.n	d5640 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d5650:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5652:	a901      	add	r1, sp, #4
   d5654:	a80c      	add	r0, sp, #48	; 0x30
   d5656:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5658:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d565c:	f7ff fc88 	bl	d4f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5662:	ac07      	add	r4, sp, #28
   d5664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5666:	682b      	ldr	r3, [r5, #0]
   d5668:	7023      	strb	r3, [r4, #0]
   d566a:	e7cc      	b.n	d5606 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d566c:	9800      	ldr	r0, [sp, #0]
   d566e:	f7ff f8a5 	bl	d47bc <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d5672:	4648      	mov	r0, r9
   d5674:	b013      	add	sp, #76	; 0x4c
   d5676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d567a:	bf00      	nop
   d567c:	000d6318 	.word	0x000d6318

000d5680 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5680:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5682:	2300      	movs	r3, #0
   d5684:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5688:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d568a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d568e:	4770      	bx	lr

000d5690 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5694:	461e      	mov	r6, r3
    stop();
   d5696:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5698:	460c      	mov	r4, r1
   d569a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d569e:	4605      	mov	r5, r0
   d56a0:	4617      	mov	r7, r2
    stop();
   d56a2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d56a4:	7d23      	ldrb	r3, [r4, #20]
   d56a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d56aa:	2b04      	cmp	r3, #4
   d56ac:	bf0c      	ite	eq
   d56ae:	2002      	moveq	r0, #2
   d56b0:	200a      	movne	r0, #10
   d56b2:	2206      	movs	r2, #6
   d56b4:	2101      	movs	r1, #1
   d56b6:	f7ff f959 	bl	d496c <sock_socket>
   d56ba:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d56be:	696b      	ldr	r3, [r5, #20]
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	2b00      	cmp	r3, #0
   d56c4:	db18      	blt.n	d56f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d56c6:	4628      	mov	r0, r5
   d56c8:	f7ff ffda 	bl	d5680 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d56cc:	b1d6      	cbz	r6, d5704 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d56ce:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d56d0:	a903      	add	r1, sp, #12
   d56d2:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d56d4:	9303      	str	r3, [sp, #12]
   d56d6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d56da:	f7ff f887 	bl	d47ec <if_index_to_name>
   d56de:	b958      	cbnz	r0, d56f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d56e0:	6968      	ldr	r0, [r5, #20]
   d56e2:	2306      	movs	r3, #6
   d56e4:	9300      	str	r3, [sp, #0]
   d56e6:	f241 020b 	movw	r2, #4107	; 0x100b
   d56ea:	ab03      	add	r3, sp, #12
   d56ec:	f640 71ff 	movw	r1, #4095	; 0xfff
   d56f0:	6800      	ldr	r0, [r0, #0]
   d56f2:	f7ff f913 	bl	d491c <sock_setsockopt>
   d56f6:	b128      	cbz	r0, d5704 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d56f8:	682b      	ldr	r3, [r5, #0]
   d56fa:	4628      	mov	r0, r5
   d56fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d56fe:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5700:	4798      	blx	r3
   d5702:	e03b      	b.n	d577c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5704:	261c      	movs	r6, #28
   d5706:	4632      	mov	r2, r6
   d5708:	2100      	movs	r1, #0
   d570a:	a803      	add	r0, sp, #12
   d570c:	f000 fb86 	bl	d5e1c <memset>
    if (ip.version() == 4) {
   d5710:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5712:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5716:	2b04      	cmp	r3, #4
   d5718:	d10c      	bne.n	d5734 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d571a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d571c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d571e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5722:	f7ff f8bb 	bl	d489c <inet_htons>
   d5726:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d572a:	6860      	ldr	r0, [r4, #4]
   d572c:	f7ff f8ae 	bl	d488c <inet_htonl>
   d5730:	9004      	str	r0, [sp, #16]
   d5732:	e013      	b.n	d575c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5734:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5736:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5738:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d573c:	f7ff f8ae 	bl	d489c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5740:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5742:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5746:	1d23      	adds	r3, r4, #4
   d5748:	f104 0714 	add.w	r7, r4, #20
   d574c:	6818      	ldr	r0, [r3, #0]
   d574e:	6859      	ldr	r1, [r3, #4]
   d5750:	4632      	mov	r2, r6
   d5752:	c203      	stmia	r2!, {r0, r1}
   d5754:	3308      	adds	r3, #8
   d5756:	42bb      	cmp	r3, r7
   d5758:	4616      	mov	r6, r2
   d575a:	d1f7      	bne.n	d574c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d575c:	696b      	ldr	r3, [r5, #20]
   d575e:	221c      	movs	r2, #28
   d5760:	a903      	add	r1, sp, #12
   d5762:	6818      	ldr	r0, [r3, #0]
   d5764:	f7ff f8ea 	bl	d493c <sock_connect>
   d5768:	2800      	cmp	r0, #0
   d576a:	d1c5      	bne.n	d56f8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d576c:	3404      	adds	r4, #4
   d576e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5770:	696d      	ldr	r5, [r5, #20]
   d5772:	358c      	adds	r5, #140	; 0x8c
   d5774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5776:	6823      	ldr	r3, [r4, #0]
   d5778:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d577a:	2401      	movs	r4, #1
}
   d577c:	4620      	mov	r0, r4
   d577e:	b00a      	add	sp, #40	; 0x28
   d5780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5784 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5784:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5786:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5788:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d578a:	6818      	ldr	r0, [r3, #0]
   d578c:	2800      	cmp	r0, #0
   d578e:	db01      	blt.n	d5794 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5790:	f7ff f8cc 	bl	d492c <sock_close>
   d5794:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5796:	f04f 32ff 	mov.w	r2, #4294967295
   d579a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d579c:	6960      	ldr	r0, [r4, #20]
   d579e:	2211      	movs	r2, #17
   d57a0:	2100      	movs	r1, #0
   d57a2:	308c      	adds	r0, #140	; 0x8c
   d57a4:	f000 fb3a 	bl	d5e1c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d57a8:	4620      	mov	r0, r4
}
   d57aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d57ae:	f7ff bf67 	b.w	d5680 <_ZN9TCPClient12flush_bufferEv>
	...

000d57b4 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d57b4:	b530      	push	{r4, r5, lr}
   d57b6:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d57b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d57bc:	b08b      	sub	sp, #44	; 0x2c
   d57be:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d57c0:	b11b      	cbz	r3, d57ca <_ZN9TCPClient9availableEv+0x16>
   d57c2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d57c6:	429a      	cmp	r2, r3
   d57c8:	d040      	beq.n	d584c <_ZN9TCPClient9availableEv+0x98>
   d57ca:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d57cc:	6818      	ldr	r0, [r3, #0]
   d57ce:	2800      	cmp	r0, #0
   d57d0:	db3f      	blt.n	d5852 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d57d2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d57d6:	2d7f      	cmp	r5, #127	; 0x7f
   d57d8:	d83b      	bhi.n	d5852 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d57da:	1d19      	adds	r1, r3, #4
   d57dc:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d57e0:	2308      	movs	r3, #8
   d57e2:	4429      	add	r1, r5
   d57e4:	f7ff f8b2 	bl	d494c <sock_recv>
            if (ret > 0) {
   d57e8:	2800      	cmp	r0, #0
   d57ea:	dd0c      	ble.n	d5806 <_ZN9TCPClient9availableEv+0x52>
   d57ec:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d57ee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d57f2:	b90a      	cbnz	r2, d57f8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d57f4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d57f8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d57fa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d57fe:	4418      	add	r0, r3
   d5800:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5804:	e025      	b.n	d5852 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5806:	f7ff f985 	bl	d4b14 <__errno>
   d580a:	6803      	ldr	r3, [r0, #0]
   d580c:	2b0b      	cmp	r3, #11
   d580e:	d020      	beq.n	d5852 <_ZN9TCPClient9availableEv+0x9e>
   d5810:	f7ff f980 	bl	d4b14 <__errno>
   d5814:	6803      	ldr	r3, [r0, #0]
   d5816:	2b0b      	cmp	r3, #11
   d5818:	d01b      	beq.n	d5852 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d581a:	2320      	movs	r3, #32
   d581c:	2500      	movs	r5, #0
   d581e:	9302      	str	r3, [sp, #8]
   d5820:	9503      	str	r5, [sp, #12]
   d5822:	f7ff f977 	bl	d4b14 <__errno>
   d5826:	6803      	ldr	r3, [r0, #0]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	4b0e      	ldr	r3, [pc, #56]	; (d5864 <_ZN9TCPClient9availableEv+0xb0>)
   d582c:	9300      	str	r3, [sp, #0]
   d582e:	aa02      	add	r2, sp, #8
   d5830:	462b      	mov	r3, r5
   d5832:	490d      	ldr	r1, [pc, #52]	; (d5868 <_ZN9TCPClient9availableEv+0xb4>)
   d5834:	2032      	movs	r0, #50	; 0x32
   d5836:	f7ff f8d9 	bl	d49ec <log_message>
                    sock_close(d_->sock);
   d583a:	6963      	ldr	r3, [r4, #20]
   d583c:	6818      	ldr	r0, [r3, #0]
   d583e:	f7ff f875 	bl	d492c <sock_close>
   d5842:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5844:	f04f 32ff 	mov.w	r2, #4294967295
   d5848:	601a      	str	r2, [r3, #0]
   d584a:	e002      	b.n	d5852 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d584c:	f7ff ff18 	bl	d5680 <_ZN9TCPClient12flush_bufferEv>
   d5850:	e7bb      	b.n	d57ca <_ZN9TCPClient9availableEv+0x16>
   d5852:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5854:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5858:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d585c:	1a18      	subs	r0, r3, r0
}
   d585e:	b00b      	add	sp, #44	; 0x2c
   d5860:	bd30      	pop	{r4, r5, pc}
   d5862:	bf00      	nop
   d5864:	000d6427 	.word	0x000d6427
   d5868:	000d6420 	.word	0x000d6420

000d586c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d586c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d586e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5870:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5872:	6001      	str	r1, [r0, #0]
   d5874:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d5878:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d587c:	3088      	adds	r0, #136	; 0x88
   d587e:	f7ff fb69 	bl	d4f54 <_ZN9IPAddressC1Ev>
}
   d5882:	4620      	mov	r0, r4
   d5884:	bd10      	pop	{r4, pc}
	...

000d5888 <_ZN9TCPClientC1Ei>:
   d5888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d588c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d588e:	2300      	movs	r3, #0
   d5890:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d5892:	4a14      	ldr	r2, [pc, #80]	; (d58e4 <_ZN9TCPClientC1Ei+0x5c>)
   d5894:	6043      	str	r3, [r0, #4]
   d5896:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5898:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d589a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d589c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d589e:	20a0      	movs	r0, #160	; 0xa0
   d58a0:	460e      	mov	r6, r1
   d58a2:	f7fe fbf8 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d58a6:	4605      	mov	r5, r0
   d58a8:	b110      	cbz	r0, d58b0 <_ZN9TCPClientC1Ei+0x28>
   d58aa:	4631      	mov	r1, r6
   d58ac:	f7ff ffde 	bl	d586c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d58b0:	2014      	movs	r0, #20
   d58b2:	f7fe fbf0 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d58b6:	4603      	mov	r3, r0
   d58b8:	b128      	cbz	r0, d58c6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d58ba:	2201      	movs	r2, #1
   d58bc:	6042      	str	r2, [r0, #4]
   d58be:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d58c0:	4a09      	ldr	r2, [pc, #36]	; (d58e8 <_ZN9TCPClientC1Ei+0x60>)
   d58c2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d58c4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58c6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d58c8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d58ca:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d58cc:	b128      	cbz	r0, d58da <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d58ce:	6843      	ldr	r3, [r0, #4]
   d58d0:	3b01      	subs	r3, #1
   d58d2:	6043      	str	r3, [r0, #4]
   d58d4:	b90b      	cbnz	r3, d58da <_ZN9TCPClientC1Ei+0x52>
   d58d6:	f7ff fddf 	bl	d5498 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d58da:	4620      	mov	r0, r4
   d58dc:	f7ff fed0 	bl	d5680 <_ZN9TCPClient12flush_bufferEv>
}
   d58e0:	4620      	mov	r0, r4
   d58e2:	bd70      	pop	{r4, r5, r6, pc}
   d58e4:	000d63dc 	.word	0x000d63dc
   d58e8:	000d63c0 	.word	0x000d63c0

000d58ec <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d58ec:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d58ee:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d58f2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d58f4:	f7ff ffc8 	bl	d5888 <_ZN9TCPClientC1Ei>
}
   d58f8:	4620      	mov	r0, r4
   d58fa:	bd10      	pop	{r4, pc}

000d58fc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d58fc:	b510      	push	{r4, lr}
   d58fe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5900:	6800      	ldr	r0, [r0, #0]
   d5902:	2800      	cmp	r0, #0
   d5904:	db01      	blt.n	d590a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5906:	f7ff f811 	bl	d492c <sock_close>
    }
}
   d590a:	4620      	mov	r0, r4
   d590c:	bd10      	pop	{r4, pc}

000d590e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d590e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5910:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d5912:	4620      	mov	r0, r4
   d5914:	f7ff fff2 	bl	d58fc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5918:	b124      	cbz	r4, d5924 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d591a:	4620      	mov	r0, r4
   d591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5920:	f7fe bbbb 	b.w	d409a <_ZdlPv>
   d5924:	bd10      	pop	{r4, pc}

000d5926 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5926:	2200      	movs	r2, #0
   d5928:	4611      	mov	r1, r2
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	f7ff b8a2 	b.w	d4a74 <network_ready>

000d5930 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5930:	2200      	movs	r2, #0
   d5932:	4611      	mov	r1, r2
   d5934:	6840      	ldr	r0, [r0, #4]
   d5936:	f7ff b8bd 	b.w	d4ab4 <network_listening>

000d593a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d593a:	2200      	movs	r2, #0
   d593c:	4611      	mov	r1, r2
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	f7ff b8c8 	b.w	d4ad4 <network_get_listen_timeout>

000d5944 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5944:	2200      	movs	r2, #0
   d5946:	6840      	ldr	r0, [r0, #4]
   d5948:	f7ff b8bc 	b.w	d4ac4 <network_set_listen_timeout>

000d594c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d594c:	2200      	movs	r2, #0
   d594e:	f081 0101 	eor.w	r1, r1, #1
   d5952:	6840      	ldr	r0, [r0, #4]
   d5954:	f7ff b8a6 	b.w	d4aa4 <network_listen>

000d5958 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5958:	2300      	movs	r3, #0
   d595a:	461a      	mov	r2, r3
   d595c:	4619      	mov	r1, r3
   d595e:	6840      	ldr	r0, [r0, #4]
   d5960:	f7ff b898 	b.w	d4a94 <network_off>

000d5964 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5964:	2300      	movs	r3, #0
   d5966:	461a      	mov	r2, r3
   d5968:	4619      	mov	r1, r3
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	f7ff b88a 	b.w	d4a84 <network_on>

000d5970 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5970:	2200      	movs	r2, #0
   d5972:	4611      	mov	r1, r2
   d5974:	6840      	ldr	r0, [r0, #4]
   d5976:	f7ff b86d 	b.w	d4a54 <network_connecting>

000d597a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d597a:	2200      	movs	r2, #0
   d597c:	2102      	movs	r1, #2
   d597e:	6840      	ldr	r0, [r0, #4]
   d5980:	f7ff b870 	b.w	d4a64 <network_disconnect>

000d5984 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5984:	2300      	movs	r3, #0
   d5986:	461a      	mov	r2, r3
   d5988:	6840      	ldr	r0, [r0, #4]
   d598a:	f7ff b85b 	b.w	d4a44 <network_connect>
	...

000d5990 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5990:	4b02      	ldr	r3, [pc, #8]	; (d599c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5992:	2204      	movs	r2, #4
   d5994:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5996:	4a02      	ldr	r2, [pc, #8]	; (d59a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5998:	601a      	str	r2, [r3, #0]
   d599a:	4770      	bx	lr
   d599c:	2003e73c 	.word	0x2003e73c
   d59a0:	000d6440 	.word	0x000d6440

000d59a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d59a4:	2300      	movs	r3, #0
   d59a6:	461a      	mov	r2, r3
   d59a8:	6840      	ldr	r0, [r0, #4]
   d59aa:	f7ff b84b 	b.w	d4a44 <network_connect>

000d59ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d59ae:	2200      	movs	r2, #0
   d59b0:	2102      	movs	r1, #2
   d59b2:	6840      	ldr	r0, [r0, #4]
   d59b4:	f7ff b856 	b.w	d4a64 <network_disconnect>

000d59b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d59b8:	2200      	movs	r2, #0
   d59ba:	4611      	mov	r1, r2
   d59bc:	6840      	ldr	r0, [r0, #4]
   d59be:	f7ff b849 	b.w	d4a54 <network_connecting>

000d59c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d59c2:	2200      	movs	r2, #0
   d59c4:	4611      	mov	r1, r2
   d59c6:	6840      	ldr	r0, [r0, #4]
   d59c8:	f7ff b854 	b.w	d4a74 <network_ready>

000d59cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d59cc:	2300      	movs	r3, #0
   d59ce:	461a      	mov	r2, r3
   d59d0:	4619      	mov	r1, r3
   d59d2:	6840      	ldr	r0, [r0, #4]
   d59d4:	f7ff b856 	b.w	d4a84 <network_on>

000d59d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d59d8:	2300      	movs	r3, #0
   d59da:	461a      	mov	r2, r3
   d59dc:	4619      	mov	r1, r3
   d59de:	6840      	ldr	r0, [r0, #4]
   d59e0:	f7ff b858 	b.w	d4a94 <network_off>

000d59e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d59e4:	2200      	movs	r2, #0
   d59e6:	f081 0101 	eor.w	r1, r1, #1
   d59ea:	6840      	ldr	r0, [r0, #4]
   d59ec:	f7ff b85a 	b.w	d4aa4 <network_listen>

000d59f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d59f0:	2200      	movs	r2, #0
   d59f2:	6840      	ldr	r0, [r0, #4]
   d59f4:	f7ff b866 	b.w	d4ac4 <network_set_listen_timeout>

000d59f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d59f8:	2200      	movs	r2, #0
   d59fa:	4611      	mov	r1, r2
   d59fc:	6840      	ldr	r0, [r0, #4]
   d59fe:	f7ff b869 	b.w	d4ad4 <network_get_listen_timeout>

000d5a02 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a02:	2200      	movs	r2, #0
   d5a04:	4611      	mov	r1, r2
   d5a06:	6840      	ldr	r0, [r0, #4]
   d5a08:	f7ff b854 	b.w	d4ab4 <network_listening>

000d5a0c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a10:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a12:	b095      	sub	sp, #84	; 0x54
   d5a14:	4616      	mov	r6, r2
   d5a16:	460d      	mov	r5, r1
   d5a18:	4607      	mov	r7, r0
    IPAddress addr;
   d5a1a:	f7ff fa9b 	bl	d4f54 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5a1e:	4621      	mov	r1, r4
   d5a20:	2220      	movs	r2, #32
   d5a22:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a24:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a26:	f000 f9f9 	bl	d5e1c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a2a:	2340      	movs	r3, #64	; 0x40
   d5a2c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a2e:	4621      	mov	r1, r4
   d5a30:	466b      	mov	r3, sp
   d5a32:	aa0c      	add	r2, sp, #48	; 0x30
   d5a34:	4630      	mov	r0, r6
   d5a36:	f7fe fec9 	bl	d47cc <netdb_getaddrinfo>
    if (!r) {
   d5a3a:	4604      	mov	r4, r0
   d5a3c:	2800      	cmp	r0, #0
   d5a3e:	d144      	bne.n	d5aca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a40:	4602      	mov	r2, r0
   d5a42:	2101      	movs	r1, #1
   d5a44:	6868      	ldr	r0, [r5, #4]
   d5a46:	f7ff f815 	bl	d4a74 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a4a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a4c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a4e:	4622      	mov	r2, r4
   d5a50:	6868      	ldr	r0, [r5, #4]
   d5a52:	f7ff f80f 	bl	d4a74 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a56:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a58:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5a5a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a5c:	2e00      	cmp	r6, #0
   d5a5e:	d034      	beq.n	d5aca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5a60:	2900      	cmp	r1, #0
   d5a62:	d132      	bne.n	d5aca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5a64:	6873      	ldr	r3, [r6, #4]
   d5a66:	2b02      	cmp	r3, #2
   d5a68:	d002      	beq.n	d5a70 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5a6a:	2b0a      	cmp	r3, #10
   d5a6c:	d009      	beq.n	d5a82 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5a6e:	e02a      	b.n	d5ac6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5a70:	f1b8 0f00 	cmp.w	r8, #0
   d5a74:	d027      	beq.n	d5ac6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5a76:	6971      	ldr	r1, [r6, #20]
   d5a78:	4638      	mov	r0, r7
   d5a7a:	3104      	adds	r1, #4
   d5a7c:	f7ff faad 	bl	d4fda <_ZN9IPAddressaSEPKh>
   d5a80:	e020      	b.n	d5ac4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a82:	f1b9 0f00 	cmp.w	r9, #0
   d5a86:	d01e      	beq.n	d5ac6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a88:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a8a:	2211      	movs	r2, #17
   d5a8c:	a801      	add	r0, sp, #4
   d5a8e:	f000 f9c5 	bl	d5e1c <memset>
                    a.v = 6;
   d5a92:	2306      	movs	r3, #6
   d5a94:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a98:	ad01      	add	r5, sp, #4
   d5a9a:	f104 0308 	add.w	r3, r4, #8
   d5a9e:	3418      	adds	r4, #24
   d5aa0:	6818      	ldr	r0, [r3, #0]
   d5aa2:	6859      	ldr	r1, [r3, #4]
   d5aa4:	462a      	mov	r2, r5
   d5aa6:	c203      	stmia	r2!, {r0, r1}
   d5aa8:	3308      	adds	r3, #8
   d5aaa:	42a3      	cmp	r3, r4
   d5aac:	4615      	mov	r5, r2
   d5aae:	d1f7      	bne.n	d5aa0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5ab0:	a901      	add	r1, sp, #4
   d5ab2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ab4:	ad07      	add	r5, sp, #28
   d5ab6:	f7ff fa5b 	bl	d4f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5abc:	1d3c      	adds	r4, r7, #4
   d5abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ac0:	682b      	ldr	r3, [r5, #0]
   d5ac2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5ac4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ac6:	69f6      	ldr	r6, [r6, #28]
   d5ac8:	e7c8      	b.n	d5a5c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5aca:	9800      	ldr	r0, [sp, #0]
   d5acc:	f7fe fe76 	bl	d47bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ad0:	4638      	mov	r0, r7
   d5ad2:	b015      	add	sp, #84	; 0x54
   d5ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ad8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ad8:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ada:	4a03      	ldr	r2, [pc, #12]	; (d5ae8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5adc:	601a      	str	r2, [r3, #0]
   d5ade:	2200      	movs	r2, #0
   d5ae0:	605a      	str	r2, [r3, #4]
   d5ae2:	4770      	bx	lr
   d5ae4:	2003e744 	.word	0x2003e744
   d5ae8:	000d6474 	.word	0x000d6474

000d5aec <__aeabi_atexit>:
   d5aec:	460b      	mov	r3, r1
   d5aee:	4601      	mov	r1, r0
   d5af0:	4618      	mov	r0, r3
   d5af2:	f000 b94b 	b.w	d5d8c <__cxa_atexit>

000d5af6 <_ZdlPvj>:
   d5af6:	f7fe bad0 	b.w	d409a <_ZdlPv>
	...

000d5afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5afc:	4b18      	ldr	r3, [pc, #96]	; (d5b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5afe:	681a      	ldr	r2, [r3, #0]
   d5b00:	07d1      	lsls	r1, r2, #31
   d5b02:	bf5c      	itt	pl
   d5b04:	2201      	movpl	r2, #1
   d5b06:	601a      	strpl	r2, [r3, #0]
   d5b08:	4b16      	ldr	r3, [pc, #88]	; (d5b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b0a:	681a      	ldr	r2, [r3, #0]
   d5b0c:	07d2      	lsls	r2, r2, #31
   d5b0e:	bf5c      	itt	pl
   d5b10:	2201      	movpl	r2, #1
   d5b12:	601a      	strpl	r2, [r3, #0]
   d5b14:	4b14      	ldr	r3, [pc, #80]	; (d5b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b16:	681a      	ldr	r2, [r3, #0]
   d5b18:	07d0      	lsls	r0, r2, #31
   d5b1a:	bf5c      	itt	pl
   d5b1c:	2201      	movpl	r2, #1
   d5b1e:	601a      	strpl	r2, [r3, #0]
   d5b20:	4b12      	ldr	r3, [pc, #72]	; (d5b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b22:	681a      	ldr	r2, [r3, #0]
   d5b24:	07d1      	lsls	r1, r2, #31
   d5b26:	bf5c      	itt	pl
   d5b28:	2201      	movpl	r2, #1
   d5b2a:	601a      	strpl	r2, [r3, #0]
   d5b2c:	4b10      	ldr	r3, [pc, #64]	; (d5b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b2e:	681a      	ldr	r2, [r3, #0]
   d5b30:	07d2      	lsls	r2, r2, #31
   d5b32:	bf5c      	itt	pl
   d5b34:	2201      	movpl	r2, #1
   d5b36:	601a      	strpl	r2, [r3, #0]
   d5b38:	4b0e      	ldr	r3, [pc, #56]	; (d5b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b3a:	681a      	ldr	r2, [r3, #0]
   d5b3c:	07d0      	lsls	r0, r2, #31
   d5b3e:	bf5c      	itt	pl
   d5b40:	2201      	movpl	r2, #1
   d5b42:	601a      	strpl	r2, [r3, #0]
   d5b44:	4b0c      	ldr	r3, [pc, #48]	; (d5b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b46:	681a      	ldr	r2, [r3, #0]
   d5b48:	07d1      	lsls	r1, r2, #31
   d5b4a:	bf5c      	itt	pl
   d5b4c:	2201      	movpl	r2, #1
   d5b4e:	601a      	strpl	r2, [r3, #0]
   d5b50:	4b0a      	ldr	r3, [pc, #40]	; (d5b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b52:	681a      	ldr	r2, [r3, #0]
   d5b54:	07d2      	lsls	r2, r2, #31
   d5b56:	bf5c      	itt	pl
   d5b58:	2201      	movpl	r2, #1
   d5b5a:	601a      	strpl	r2, [r3, #0]
   d5b5c:	4770      	bx	lr
   d5b5e:	bf00      	nop
   d5b60:	2003e76c 	.word	0x2003e76c
   d5b64:	2003e768 	.word	0x2003e768
   d5b68:	2003e764 	.word	0x2003e764
   d5b6c:	2003e760 	.word	0x2003e760
   d5b70:	2003e75c 	.word	0x2003e75c
   d5b74:	2003e758 	.word	0x2003e758
   d5b78:	2003e754 	.word	0x2003e754
   d5b7c:	2003e750 	.word	0x2003e750

000d5b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5b80:	4b24      	ldr	r3, [pc, #144]	; (d5c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5b82:	681a      	ldr	r2, [r3, #0]
   d5b84:	07d0      	lsls	r0, r2, #31
   d5b86:	bf5c      	itt	pl
   d5b88:	2201      	movpl	r2, #1
   d5b8a:	601a      	strpl	r2, [r3, #0]
   d5b8c:	4b22      	ldr	r3, [pc, #136]	; (d5c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5b8e:	681a      	ldr	r2, [r3, #0]
   d5b90:	07d1      	lsls	r1, r2, #31
   d5b92:	bf5c      	itt	pl
   d5b94:	2201      	movpl	r2, #1
   d5b96:	601a      	strpl	r2, [r3, #0]
   d5b98:	4b20      	ldr	r3, [pc, #128]	; (d5c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5b9a:	681a      	ldr	r2, [r3, #0]
   d5b9c:	07d2      	lsls	r2, r2, #31
   d5b9e:	bf5c      	itt	pl
   d5ba0:	2201      	movpl	r2, #1
   d5ba2:	601a      	strpl	r2, [r3, #0]
   d5ba4:	4b1e      	ldr	r3, [pc, #120]	; (d5c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5ba6:	681a      	ldr	r2, [r3, #0]
   d5ba8:	07d0      	lsls	r0, r2, #31
   d5baa:	bf5c      	itt	pl
   d5bac:	2201      	movpl	r2, #1
   d5bae:	601a      	strpl	r2, [r3, #0]
   d5bb0:	4b1c      	ldr	r3, [pc, #112]	; (d5c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5bb2:	681a      	ldr	r2, [r3, #0]
   d5bb4:	07d1      	lsls	r1, r2, #31
   d5bb6:	bf5c      	itt	pl
   d5bb8:	2201      	movpl	r2, #1
   d5bba:	601a      	strpl	r2, [r3, #0]
   d5bbc:	4b1a      	ldr	r3, [pc, #104]	; (d5c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5bbe:	681a      	ldr	r2, [r3, #0]
   d5bc0:	07d2      	lsls	r2, r2, #31
   d5bc2:	bf5c      	itt	pl
   d5bc4:	2201      	movpl	r2, #1
   d5bc6:	601a      	strpl	r2, [r3, #0]
   d5bc8:	4b18      	ldr	r3, [pc, #96]	; (d5c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5bca:	681a      	ldr	r2, [r3, #0]
   d5bcc:	07d0      	lsls	r0, r2, #31
   d5bce:	bf5c      	itt	pl
   d5bd0:	2201      	movpl	r2, #1
   d5bd2:	601a      	strpl	r2, [r3, #0]
   d5bd4:	4b16      	ldr	r3, [pc, #88]	; (d5c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5bd6:	681a      	ldr	r2, [r3, #0]
   d5bd8:	07d1      	lsls	r1, r2, #31
   d5bda:	bf5c      	itt	pl
   d5bdc:	2201      	movpl	r2, #1
   d5bde:	601a      	strpl	r2, [r3, #0]
   d5be0:	4b14      	ldr	r3, [pc, #80]	; (d5c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5be2:	681a      	ldr	r2, [r3, #0]
   d5be4:	07d2      	lsls	r2, r2, #31
   d5be6:	bf5c      	itt	pl
   d5be8:	2201      	movpl	r2, #1
   d5bea:	601a      	strpl	r2, [r3, #0]
   d5bec:	4b12      	ldr	r3, [pc, #72]	; (d5c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5bee:	681a      	ldr	r2, [r3, #0]
   d5bf0:	07d0      	lsls	r0, r2, #31
   d5bf2:	bf5c      	itt	pl
   d5bf4:	2201      	movpl	r2, #1
   d5bf6:	601a      	strpl	r2, [r3, #0]
   d5bf8:	4b10      	ldr	r3, [pc, #64]	; (d5c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5bfa:	681a      	ldr	r2, [r3, #0]
   d5bfc:	07d1      	lsls	r1, r2, #31
   d5bfe:	bf5c      	itt	pl
   d5c00:	2201      	movpl	r2, #1
   d5c02:	601a      	strpl	r2, [r3, #0]
   d5c04:	4b0e      	ldr	r3, [pc, #56]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5c06:	681a      	ldr	r2, [r3, #0]
   d5c08:	07d2      	lsls	r2, r2, #31
   d5c0a:	bf5c      	itt	pl
   d5c0c:	2201      	movpl	r2, #1
   d5c0e:	601a      	strpl	r2, [r3, #0]
   d5c10:	4770      	bx	lr
   d5c12:	bf00      	nop
   d5c14:	2003e79c 	.word	0x2003e79c
   d5c18:	2003e798 	.word	0x2003e798
   d5c1c:	2003e794 	.word	0x2003e794
   d5c20:	2003e790 	.word	0x2003e790
   d5c24:	2003e78c 	.word	0x2003e78c
   d5c28:	2003e788 	.word	0x2003e788
   d5c2c:	2003e784 	.word	0x2003e784
   d5c30:	2003e780 	.word	0x2003e780
   d5c34:	2003e77c 	.word	0x2003e77c
   d5c38:	2003e778 	.word	0x2003e778
   d5c3c:	2003e774 	.word	0x2003e774
   d5c40:	2003e770 	.word	0x2003e770

000d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c44:	4b24      	ldr	r3, [pc, #144]	; (d5cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c46:	681a      	ldr	r2, [r3, #0]
   d5c48:	07d0      	lsls	r0, r2, #31
   d5c4a:	bf5c      	itt	pl
   d5c4c:	2201      	movpl	r2, #1
   d5c4e:	601a      	strpl	r2, [r3, #0]
   d5c50:	4b22      	ldr	r3, [pc, #136]	; (d5cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5c52:	681a      	ldr	r2, [r3, #0]
   d5c54:	07d1      	lsls	r1, r2, #31
   d5c56:	bf5c      	itt	pl
   d5c58:	2201      	movpl	r2, #1
   d5c5a:	601a      	strpl	r2, [r3, #0]
   d5c5c:	4b20      	ldr	r3, [pc, #128]	; (d5ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5c5e:	681a      	ldr	r2, [r3, #0]
   d5c60:	07d2      	lsls	r2, r2, #31
   d5c62:	bf5c      	itt	pl
   d5c64:	2201      	movpl	r2, #1
   d5c66:	601a      	strpl	r2, [r3, #0]
   d5c68:	4b1e      	ldr	r3, [pc, #120]	; (d5ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c6a:	681a      	ldr	r2, [r3, #0]
   d5c6c:	07d0      	lsls	r0, r2, #31
   d5c6e:	bf5c      	itt	pl
   d5c70:	2201      	movpl	r2, #1
   d5c72:	601a      	strpl	r2, [r3, #0]
   d5c74:	4b1c      	ldr	r3, [pc, #112]	; (d5ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5c76:	681a      	ldr	r2, [r3, #0]
   d5c78:	07d1      	lsls	r1, r2, #31
   d5c7a:	bf5c      	itt	pl
   d5c7c:	2201      	movpl	r2, #1
   d5c7e:	601a      	strpl	r2, [r3, #0]
   d5c80:	4b1a      	ldr	r3, [pc, #104]	; (d5cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5c82:	681a      	ldr	r2, [r3, #0]
   d5c84:	07d2      	lsls	r2, r2, #31
   d5c86:	bf5c      	itt	pl
   d5c88:	2201      	movpl	r2, #1
   d5c8a:	601a      	strpl	r2, [r3, #0]
   d5c8c:	4b18      	ldr	r3, [pc, #96]	; (d5cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5c8e:	681a      	ldr	r2, [r3, #0]
   d5c90:	07d0      	lsls	r0, r2, #31
   d5c92:	bf5c      	itt	pl
   d5c94:	2201      	movpl	r2, #1
   d5c96:	601a      	strpl	r2, [r3, #0]
   d5c98:	4b16      	ldr	r3, [pc, #88]	; (d5cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5c9a:	681a      	ldr	r2, [r3, #0]
   d5c9c:	07d1      	lsls	r1, r2, #31
   d5c9e:	bf5c      	itt	pl
   d5ca0:	2201      	movpl	r2, #1
   d5ca2:	601a      	strpl	r2, [r3, #0]
   d5ca4:	4b14      	ldr	r3, [pc, #80]	; (d5cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5ca6:	681a      	ldr	r2, [r3, #0]
   d5ca8:	07d2      	lsls	r2, r2, #31
   d5caa:	bf5c      	itt	pl
   d5cac:	2201      	movpl	r2, #1
   d5cae:	601a      	strpl	r2, [r3, #0]
   d5cb0:	4b12      	ldr	r3, [pc, #72]	; (d5cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5cb2:	681a      	ldr	r2, [r3, #0]
   d5cb4:	07d0      	lsls	r0, r2, #31
   d5cb6:	bf5c      	itt	pl
   d5cb8:	2201      	movpl	r2, #1
   d5cba:	601a      	strpl	r2, [r3, #0]
   d5cbc:	4b10      	ldr	r3, [pc, #64]	; (d5d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5cbe:	681a      	ldr	r2, [r3, #0]
   d5cc0:	07d1      	lsls	r1, r2, #31
   d5cc2:	bf5c      	itt	pl
   d5cc4:	2201      	movpl	r2, #1
   d5cc6:	601a      	strpl	r2, [r3, #0]
   d5cc8:	4b0e      	ldr	r3, [pc, #56]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5cca:	681a      	ldr	r2, [r3, #0]
   d5ccc:	07d2      	lsls	r2, r2, #31
   d5cce:	bf5c      	itt	pl
   d5cd0:	2201      	movpl	r2, #1
   d5cd2:	601a      	strpl	r2, [r3, #0]
   d5cd4:	4770      	bx	lr
   d5cd6:	bf00      	nop
   d5cd8:	2003e7cc 	.word	0x2003e7cc
   d5cdc:	2003e7c8 	.word	0x2003e7c8
   d5ce0:	2003e7c4 	.word	0x2003e7c4
   d5ce4:	2003e7c0 	.word	0x2003e7c0
   d5ce8:	2003e7bc 	.word	0x2003e7bc
   d5cec:	2003e7b8 	.word	0x2003e7b8
   d5cf0:	2003e7b4 	.word	0x2003e7b4
   d5cf4:	2003e7b0 	.word	0x2003e7b0
   d5cf8:	2003e7ac 	.word	0x2003e7ac
   d5cfc:	2003e7a8 	.word	0x2003e7a8
   d5d00:	2003e7a4 	.word	0x2003e7a4
   d5d04:	2003e7a0 	.word	0x2003e7a0

000d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d08:	4b18      	ldr	r3, [pc, #96]	; (d5d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d0a:	681a      	ldr	r2, [r3, #0]
   d5d0c:	07d1      	lsls	r1, r2, #31
   d5d0e:	bf5c      	itt	pl
   d5d10:	2201      	movpl	r2, #1
   d5d12:	601a      	strpl	r2, [r3, #0]
   d5d14:	4b16      	ldr	r3, [pc, #88]	; (d5d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d16:	681a      	ldr	r2, [r3, #0]
   d5d18:	07d2      	lsls	r2, r2, #31
   d5d1a:	bf5c      	itt	pl
   d5d1c:	2201      	movpl	r2, #1
   d5d1e:	601a      	strpl	r2, [r3, #0]
   d5d20:	4b14      	ldr	r3, [pc, #80]	; (d5d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d22:	681a      	ldr	r2, [r3, #0]
   d5d24:	07d0      	lsls	r0, r2, #31
   d5d26:	bf5c      	itt	pl
   d5d28:	2201      	movpl	r2, #1
   d5d2a:	601a      	strpl	r2, [r3, #0]
   d5d2c:	4b12      	ldr	r3, [pc, #72]	; (d5d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d2e:	681a      	ldr	r2, [r3, #0]
   d5d30:	07d1      	lsls	r1, r2, #31
   d5d32:	bf5c      	itt	pl
   d5d34:	2201      	movpl	r2, #1
   d5d36:	601a      	strpl	r2, [r3, #0]
   d5d38:	4b10      	ldr	r3, [pc, #64]	; (d5d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d3a:	681a      	ldr	r2, [r3, #0]
   d5d3c:	07d2      	lsls	r2, r2, #31
   d5d3e:	bf5c      	itt	pl
   d5d40:	2201      	movpl	r2, #1
   d5d42:	601a      	strpl	r2, [r3, #0]
   d5d44:	4b0e      	ldr	r3, [pc, #56]	; (d5d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d46:	681a      	ldr	r2, [r3, #0]
   d5d48:	07d0      	lsls	r0, r2, #31
   d5d4a:	bf5c      	itt	pl
   d5d4c:	2201      	movpl	r2, #1
   d5d4e:	601a      	strpl	r2, [r3, #0]
   d5d50:	4b0c      	ldr	r3, [pc, #48]	; (d5d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d52:	681a      	ldr	r2, [r3, #0]
   d5d54:	07d1      	lsls	r1, r2, #31
   d5d56:	bf5c      	itt	pl
   d5d58:	2201      	movpl	r2, #1
   d5d5a:	601a      	strpl	r2, [r3, #0]
   d5d5c:	4b0a      	ldr	r3, [pc, #40]	; (d5d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d5e:	681a      	ldr	r2, [r3, #0]
   d5d60:	07d2      	lsls	r2, r2, #31
   d5d62:	bf5c      	itt	pl
   d5d64:	2201      	movpl	r2, #1
   d5d66:	601a      	strpl	r2, [r3, #0]
   d5d68:	4770      	bx	lr
   d5d6a:	bf00      	nop
   d5d6c:	2003e7ec 	.word	0x2003e7ec
   d5d70:	2003e7e8 	.word	0x2003e7e8
   d5d74:	2003e7e4 	.word	0x2003e7e4
   d5d78:	2003e7e0 	.word	0x2003e7e0
   d5d7c:	2003e7dc 	.word	0x2003e7dc
   d5d80:	2003e7d8 	.word	0x2003e7d8
   d5d84:	2003e7d4 	.word	0x2003e7d4
   d5d88:	2003e7d0 	.word	0x2003e7d0

000d5d8c <__cxa_atexit>:
   d5d8c:	b510      	push	{r4, lr}
   d5d8e:	4c05      	ldr	r4, [pc, #20]	; (d5da4 <__cxa_atexit+0x18>)
   d5d90:	4613      	mov	r3, r2
   d5d92:	b12c      	cbz	r4, d5da0 <__cxa_atexit+0x14>
   d5d94:	460a      	mov	r2, r1
   d5d96:	4601      	mov	r1, r0
   d5d98:	2002      	movs	r0, #2
   d5d9a:	f3af 8000 	nop.w
   d5d9e:	bd10      	pop	{r4, pc}
   d5da0:	4620      	mov	r0, r4
   d5da2:	bd10      	pop	{r4, pc}
   d5da4:	00000000 	.word	0x00000000

000d5da8 <ldiv>:
   d5da8:	2900      	cmp	r1, #0
   d5daa:	b510      	push	{r4, lr}
   d5dac:	fb91 f4f2 	sdiv	r4, r1, r2
   d5db0:	fb02 1314 	mls	r3, r2, r4, r1
   d5db4:	db04      	blt.n	d5dc0 <ldiv+0x18>
   d5db6:	2b00      	cmp	r3, #0
   d5db8:	da07      	bge.n	d5dca <ldiv+0x22>
   d5dba:	3401      	adds	r4, #1
   d5dbc:	1a9b      	subs	r3, r3, r2
   d5dbe:	e004      	b.n	d5dca <ldiv+0x22>
   d5dc0:	2b00      	cmp	r3, #0
   d5dc2:	bfc4      	itt	gt
   d5dc4:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d5dc8:	189b      	addgt	r3, r3, r2
   d5dca:	6004      	str	r4, [r0, #0]
   d5dcc:	6043      	str	r3, [r0, #4]
   d5dce:	bd10      	pop	{r4, pc}

000d5dd0 <memcpy>:
   d5dd0:	b510      	push	{r4, lr}
   d5dd2:	1e43      	subs	r3, r0, #1
   d5dd4:	440a      	add	r2, r1
   d5dd6:	4291      	cmp	r1, r2
   d5dd8:	d004      	beq.n	d5de4 <memcpy+0x14>
   d5dda:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5dde:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5de2:	e7f8      	b.n	d5dd6 <memcpy+0x6>
   d5de4:	bd10      	pop	{r4, pc}

000d5de6 <memmove>:
   d5de6:	4288      	cmp	r0, r1
   d5de8:	b510      	push	{r4, lr}
   d5dea:	eb01 0302 	add.w	r3, r1, r2
   d5dee:	d801      	bhi.n	d5df4 <memmove+0xe>
   d5df0:	1e42      	subs	r2, r0, #1
   d5df2:	e00b      	b.n	d5e0c <memmove+0x26>
   d5df4:	4298      	cmp	r0, r3
   d5df6:	d2fb      	bcs.n	d5df0 <memmove+0xa>
   d5df8:	1881      	adds	r1, r0, r2
   d5dfa:	1ad2      	subs	r2, r2, r3
   d5dfc:	42d3      	cmn	r3, r2
   d5dfe:	d004      	beq.n	d5e0a <memmove+0x24>
   d5e00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d5e04:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d5e08:	e7f8      	b.n	d5dfc <memmove+0x16>
   d5e0a:	bd10      	pop	{r4, pc}
   d5e0c:	4299      	cmp	r1, r3
   d5e0e:	d004      	beq.n	d5e1a <memmove+0x34>
   d5e10:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5e14:	f802 4f01 	strb.w	r4, [r2, #1]!
   d5e18:	e7f8      	b.n	d5e0c <memmove+0x26>
   d5e1a:	bd10      	pop	{r4, pc}

000d5e1c <memset>:
   d5e1c:	4402      	add	r2, r0
   d5e1e:	4603      	mov	r3, r0
   d5e20:	4293      	cmp	r3, r2
   d5e22:	d002      	beq.n	d5e2a <memset+0xe>
   d5e24:	f803 1b01 	strb.w	r1, [r3], #1
   d5e28:	e7fa      	b.n	d5e20 <memset+0x4>
   d5e2a:	4770      	bx	lr

000d5e2c <srand>:
   d5e2c:	b538      	push	{r3, r4, r5, lr}
   d5e2e:	4b12      	ldr	r3, [pc, #72]	; (d5e78 <srand+0x4c>)
   d5e30:	681c      	ldr	r4, [r3, #0]
   d5e32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e34:	4605      	mov	r5, r0
   d5e36:	b9d3      	cbnz	r3, d5e6e <srand+0x42>
   d5e38:	2018      	movs	r0, #24
   d5e3a:	f7fe fe5b 	bl	d4af4 <malloc>
   d5e3e:	f243 330e 	movw	r3, #13070	; 0x330e
   d5e42:	63a0      	str	r0, [r4, #56]	; 0x38
   d5e44:	8003      	strh	r3, [r0, #0]
   d5e46:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5e4a:	8043      	strh	r3, [r0, #2]
   d5e4c:	f241 2334 	movw	r3, #4660	; 0x1234
   d5e50:	8083      	strh	r3, [r0, #4]
   d5e52:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5e56:	80c3      	strh	r3, [r0, #6]
   d5e58:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5e5c:	8103      	strh	r3, [r0, #8]
   d5e5e:	2305      	movs	r3, #5
   d5e60:	8143      	strh	r3, [r0, #10]
   d5e62:	230b      	movs	r3, #11
   d5e64:	8183      	strh	r3, [r0, #12]
   d5e66:	2201      	movs	r2, #1
   d5e68:	2300      	movs	r3, #0
   d5e6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5e6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e70:	2200      	movs	r2, #0
   d5e72:	611d      	str	r5, [r3, #16]
   d5e74:	615a      	str	r2, [r3, #20]
   d5e76:	bd38      	pop	{r3, r4, r5, pc}
   d5e78:	2003e2d8 	.word	0x2003e2d8

000d5e7c <rand>:
   d5e7c:	4b19      	ldr	r3, [pc, #100]	; (d5ee4 <rand+0x68>)
   d5e7e:	b510      	push	{r4, lr}
   d5e80:	681c      	ldr	r4, [r3, #0]
   d5e82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5e84:	b9d3      	cbnz	r3, d5ebc <rand+0x40>
   d5e86:	2018      	movs	r0, #24
   d5e88:	f7fe fe34 	bl	d4af4 <malloc>
   d5e8c:	f243 330e 	movw	r3, #13070	; 0x330e
   d5e90:	63a0      	str	r0, [r4, #56]	; 0x38
   d5e92:	8003      	strh	r3, [r0, #0]
   d5e94:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5e98:	8043      	strh	r3, [r0, #2]
   d5e9a:	f241 2334 	movw	r3, #4660	; 0x1234
   d5e9e:	8083      	strh	r3, [r0, #4]
   d5ea0:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5ea4:	80c3      	strh	r3, [r0, #6]
   d5ea6:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5eaa:	8103      	strh	r3, [r0, #8]
   d5eac:	2305      	movs	r3, #5
   d5eae:	8143      	strh	r3, [r0, #10]
   d5eb0:	230b      	movs	r3, #11
   d5eb2:	8183      	strh	r3, [r0, #12]
   d5eb4:	2201      	movs	r2, #1
   d5eb6:	2300      	movs	r3, #0
   d5eb8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5ebc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5ebe:	4c0a      	ldr	r4, [pc, #40]	; (d5ee8 <rand+0x6c>)
   d5ec0:	690b      	ldr	r3, [r1, #16]
   d5ec2:	6948      	ldr	r0, [r1, #20]
   d5ec4:	4a09      	ldr	r2, [pc, #36]	; (d5eec <rand+0x70>)
   d5ec6:	435c      	muls	r4, r3
   d5ec8:	fb02 4000 	mla	r0, r2, r0, r4
   d5ecc:	fba3 2302 	umull	r2, r3, r3, r2
   d5ed0:	3201      	adds	r2, #1
   d5ed2:	4403      	add	r3, r0
   d5ed4:	f143 0300 	adc.w	r3, r3, #0
   d5ed8:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d5edc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d5ee0:	bd10      	pop	{r4, pc}
   d5ee2:	bf00      	nop
   d5ee4:	2003e2d8 	.word	0x2003e2d8
   d5ee8:	5851f42d 	.word	0x5851f42d
   d5eec:	4c957f2d 	.word	0x4c957f2d

000d5ef0 <strcpy>:
   d5ef0:	4603      	mov	r3, r0
   d5ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5ef6:	f803 2b01 	strb.w	r2, [r3], #1
   d5efa:	2a00      	cmp	r2, #0
   d5efc:	d1f9      	bne.n	d5ef2 <strcpy+0x2>
   d5efe:	4770      	bx	lr

000d5f00 <strlen>:
   d5f00:	4603      	mov	r3, r0
   d5f02:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5f06:	2a00      	cmp	r2, #0
   d5f08:	d1fb      	bne.n	d5f02 <strlen+0x2>
   d5f0a:	1a18      	subs	r0, r3, r0
   d5f0c:	3801      	subs	r0, #1
   d5f0e:	4770      	bx	lr

000d5f10 <strncpy>:
   d5f10:	b510      	push	{r4, lr}
   d5f12:	4603      	mov	r3, r0
   d5f14:	b142      	cbz	r2, d5f28 <strncpy+0x18>
   d5f16:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5f1a:	f803 4b01 	strb.w	r4, [r3], #1
   d5f1e:	3a01      	subs	r2, #1
   d5f20:	2c00      	cmp	r4, #0
   d5f22:	d1f7      	bne.n	d5f14 <strncpy+0x4>
   d5f24:	441a      	add	r2, r3
   d5f26:	e000      	b.n	d5f2a <strncpy+0x1a>
   d5f28:	bd10      	pop	{r4, pc}
   d5f2a:	4293      	cmp	r3, r2
   d5f2c:	d002      	beq.n	d5f34 <strncpy+0x24>
   d5f2e:	f803 4b01 	strb.w	r4, [r3], #1
   d5f32:	e7fa      	b.n	d5f2a <strncpy+0x1a>
   d5f34:	bd10      	pop	{r4, pc}

000d5f36 <link_code_end>:
	...

000d5f38 <dynalib_user>:
   d5f38:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5f48:	0000 0000 753c 6573 6e72 6d61 3e65 6900     ....<username>.i
   d5f58:	2e6f 6461 6661 7572 7469 632e 6d6f 3c00     o.adafruit.com.<
   d5f68:	656b 3e79 3c00 7375 7265 616e 656d 2f3e     key>.<username>/
   d5f78:	6566 6465 2f73 6566 6465 616e 656d 0031     feeds/feedname1.
   d5f88:	753c 6573 6e72 6d61 3e65 662f 6565 7364     <username>/feeds
   d5f98:	662f 6565 6e64 6d61 3265 0000               /feedname2..

000d5fa4 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d5fac:	40c9 000d 419d 000d 4241 000d 42ed 000d     .@...A..AB...B..
   d5fbc:	431f 000d 4255 000d 4295 000d               .C..UB...B..

000d5fc8 <_ZTV13Adafruit_MQTT>:
	...
   d5fd8:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d5fe8:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d5ff8:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d6008:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d6018:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d6028:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d6038:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d6048:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d6058:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d6068:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d6078:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d6088:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d6098:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d60a8:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d60b8:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d60c8:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d60d8:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d60e8:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d60f8:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d6108:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d6118:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d6128:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d6138:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d6148:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d6158:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d6168:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d6178:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d6188:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d6198:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d61a8:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d61b8:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d61c8:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d61d8:	7465 6961 736c 002e                         etails..

000d61e0 <_ZTVN5spark13EthernetClassE>:
	...
   d61e8:	4b83 000d 4b79 000d 4b6f 000d 4b65 000d     .K..yK..oK..eK..
   d61f8:	4b59 000d 4b4d 000d 4b41 000d 4b39 000d     YK..MK..AK..9K..
   d6208:	4b2f 000d 4b25 000d 5a0d 000d 6162 6475     /K..%K...Z..baud
   d6218:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d6228:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d6238:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d6248:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d6258:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d6268:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d6278:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d6288:	7070 2500 3130 7530 0020 205d 2800 3a29     pp.%010u .] .():
   d6298:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d62a8:	6564 6174 6c69 2073 203d 0d00 000a 6e6c     details = ....ln
   d62b8:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d62c8:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d62d8:	6177 6e72 7000 6e61 6369 6100 6c6c 5a00     warn.panic.all.Z
   d62e8:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   d62f8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d6308:	7361 7463 6d69 0065                         asctime.

000d6310 <_ZTV9IPAddress>:
	...
   d6318:	4ef1 000d 4ee1 000d 4ee3 000d               .N...N...N..

000d6324 <_ZTV9USBSerial>:
	...
   d632c:	4ff5 000d 5045 000d 5053 000d 4cad 000d     .O..EP..SP...L..
   d633c:	5031 000d 4ff7 000d 500d 000d 503f 000d     1P...O...P..?P..
   d634c:	5023 000d 4ff1 000d                         #P...O..

000d6354 <_ZTV11USARTSerial>:
	...
   d635c:	50f9 000d 5149 000d 5157 000d 4cad 000d     .P..IQ..WQ...L..
   d636c:	510d 000d 512f 000d 511b 000d 5143 000d     .Q../Q...Q..CQ..
   d637c:	50fb 000d 50ff 000d                         .P...P..

000d6384 <_ZTVN5spark9MeshClassE>:
	...
   d638c:	527d 000d 5273 000d 5269 000d 525f 000d     }R..sR..iR.._R..
   d639c:	5253 000d 5247 000d 523b 000d 5233 000d     SR..GR..;R..3R..
   d63ac:	5229 000d 521f 000d 5a0d 000d               )R...R...Z..

000d63b8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d63c0:	5421 000d 5427 000d 590f 000d 5435 000d     !T..'T...Y..5T..
   d63d0:	5423 000d                                   #T..

000d63d4 <_ZTV9TCPClient>:
	...
   d63dc:	40cd 000d 4101 000d 5399 000d 53b3 000d     .@...A...S...S..
   d63ec:	57b5 000d 5507 000d 54d9 000d 53dd 000d     .W...U...T...S..
   d63fc:	5691 000d 558d 000d 553b 000d 5785 000d     .V...U..;U...W..
   d640c:	53df 000d 5417 000d 53c5 000d 5439 000d     .S...T...S..9T..
   d641c:	54b9 000d 6977 6972 676e 7200 6365 2076     .T..wiring.recv 
   d642c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d6438 <_ZTVN5spark9WiFiClassE>:
	...
   d6440:	5985 000d 597b 000d 5971 000d 5927 000d     .Y..{Y..qY..'Y..
   d6450:	5965 000d 5959 000d 594d 000d 5945 000d     eY..YY..MY..EY..
   d6460:	593b 000d 5931 000d 5a0d 000d               ;Y..1Y...Z..

000d646c <_ZTVN5spark12NetworkClassE>:
	...
   d6474:	59a5 000d 59af 000d 59b9 000d 59c3 000d     .Y...Y...Y...Y..
   d6484:	59cd 000d 59d9 000d 59e5 000d 59f1 000d     .Y...Y...Y...Y..
   d6494:	59f9 000d 5a03 000d 5a0d 000d               .Y...Z...Z..

000d64a0 <__sf_fake_stdin>:
	...

000d64c0 <__sf_fake_stdout>:
	...

000d64e0 <__sf_fake_stderr>:
	...
   d6500:	0043                                        C.

000d6502 <link_const_variable_data_end>:
	...

000d6504 <link_constructors_location>:
   d6504:	000d41ad 	.word	0x000d41ad
   d6508:	000d437f 	.word	0x000d437f
   d650c:	000d47b9 	.word	0x000d47b9
   d6510:	000d4b8d 	.word	0x000d4b8d
   d6514:	000d4bc1 	.word	0x000d4bc1
   d6518:	000d4c85 	.word	0x000d4c85
   d651c:	000d4d6d 	.word	0x000d4d6d
   d6520:	000d4d7d 	.word	0x000d4d7d
   d6524:	000d4db5 	.word	0x000d4db5
   d6528:	000d5349 	.word	0x000d5349
   d652c:	000d5991 	.word	0x000d5991
   d6530:	000d5ad9 	.word	0x000d5ad9
   d6534:	000d5afd 	.word	0x000d5afd
   d6538:	000d5b81 	.word	0x000d5b81
   d653c:	000d5c45 	.word	0x000d5c45
   d6540:	000d5d09 	.word	0x000d5d09

000d6544 <link_constructors_end>:
	...
